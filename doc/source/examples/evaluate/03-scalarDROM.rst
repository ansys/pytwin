
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\evaluate\03-scalarDROM.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_evaluate_03-scalarDROM.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_evaluate_03-scalarDROM.py:

.. _ref_example_scalarDROM:

Scalar dynamic ROM Twin evaluation example
------------------------------------------
This example shows how
you can use pyTwin to load and evaluate a Twin model. The model is a scalar dynamic ROM created out of a 3D thermal
model of a Heat Exchanger, having a heat flow as input and three temperature probes as outputs. The example shows a
workflow for what-if analysis by deploying a second twin in parallel while simulating the original twin

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/scalarDROM.png'








.. GENERATED FROM PYTHON SOURCE LINES 14-17

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports, which includes downloading and importing the input files

.. GENERATED FROM PYTHON SOURCE LINES 17-30

.. code-block:: default

    import platform
    import os

    import matplotlib.pyplot as plt
    import pandas as pd

    from pytwin.evaluate import TwinModel
    from pytwin import examples

    twin_file = examples.download_file("HX_scalarDRB_23R1_other.twin", "twin_files")
    csv_input = examples.download_file("HX_scalarDRB_input.csv", "twin_input_files")









.. GENERATED FROM PYTHON SOURCE LINES 31-34

Auxiliary functions definition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Post processing for results comparison.

.. GENERATED FROM PYTHON SOURCE LINES 34-75

.. code-block:: default


    def plot_result_comparison(step_by_step_results: pd.DataFrame, what_if: pd.DataFrame):
        """Compare the results obtained from 2 different simulations executed on the same TwinModel.
        The 2 results dataset are provided as Pandas Dataframe. The function will plot the different results for all the
        outputs and save the plot as a file "results.png" """
        pd.set_option('display.precision', 12)
        pd.set_option('display.max_columns', 20)
        pd.set_option('display.expand_frame_repr', False)

        # Plotting the runtime outputs
        columns = step_by_step_results.columns[1::]
        columns_what_if = what_if.columns[1::]
        result_sets = 1  # Results from only step-by-step + what-if analysis
        fig, ax = plt.subplots(ncols=result_sets, nrows=len(columns), figsize=(18, 7))
        if len(columns) == 1:
            single_column = True
        else:
            single_column = False

        fig.subplots_adjust(hspace=0.5)
        fig.set_tight_layout({"pad": .0})

        for ind, col_name in enumerate(columns):
            # Plot runtime results
            axes0 = ax[ind]

            step_by_step_results.plot(x=0, y=col_name, ax=axes0, ls=":", color='g')
            axes0.legend(loc=2)
            axes0.set_xlabel('Time [s]')

            # Plot Twin what-if analysis results
            what_if.plot(x=0, y=columns_what_if[ind], ax=axes0, ls="-.", color='g',
                               title='Twin Runtime - What if analysis')

            if ind > 0:
                axes0.set_title('')

        # Show plot
        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 76-79

Defining external files path
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Defining the runtime log path as well as loading the input data

.. GENERATED FROM PYTHON SOURCE LINES 79-86

.. code-block:: default



    #runtime_log = os.path.join(cur_dir, 'model_{}.log'.format(platform.system()))
    twin_model_input_df = examples.load_data(csv_input)
    data_dimensions = twin_model_input_df.shape
    number_of_datapoints = data_dimensions[0] - 1








.. GENERATED FROM PYTHON SOURCE LINES 87-90

Loading the Twin Runtime and instantiating it
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Loading the Twin Runtime and instantiating it.

.. GENERATED FROM PYTHON SOURCE LINES 90-96

.. code-block:: default



    print('Loading model: {}'.format(twin_file))
    twin_model = TwinModel(twin_file)
    twin_model_what_if = None  # the second twin used for what-if analysis





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading model: C:\Users\cpetre\AppData\Local\Temp\TwinExamples\twin_files\HX_scalarDRB_23R1_other.twin




.. GENERATED FROM PYTHON SOURCE LINES 97-100

Setting up the initial settings of the Twin and initializing it
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Defining the initial inputs of the Twin, initializing it and collecting the initial outputs values

.. GENERATED FROM PYTHON SOURCE LINES 100-107

.. code-block:: default



    twin_model.initialize_evaluation()
    outputs = [twin_model.evaluation_time]
    for item in twin_model.outputs:
        outputs.append(twin_model.outputs[item])








.. GENERATED FROM PYTHON SOURCE LINES 108-111

Step by step simulation mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Looping over all the input data, simulating the Twin one time step at a time and collecting corresponding outputs

.. GENERATED FROM PYTHON SOURCE LINES 111-161

.. code-block:: default



    sim_output_list_step = [outputs]
    sim_what_if_output_list_step = []
    data_index = 0
    while data_index < number_of_datapoints:
        if data_index == int(number_of_datapoints / 2) and twin_model_what_if is None:
            filename = f'checkpoint.bin'
            #CUR_DIR = os.path.abspath(os.path.dirname(os.path.realpath(__file__))) #TODO treat cur_dir issue for doc
            #twin_state_file = os.path.join(CUR_DIR, filename)
            #twin_model._twin_runtime.twin_save_state(twin_state_file)
            twin_model_what_if = TwinModel(twin_file)
            twin_model_what_if.initialize_evaluation()
            #twin_model_what_if._twin_runtime.twin_load_state(twin_state_file)
            twin_model_what_if._evaluation_time = twin_model.evaluation_time
            sim_what_if_output_list_step.append(outputs)


        # Gets the stop time of the current simulation step
        time_end = twin_model_input_df.iloc[data_index + 1][0]
        step = time_end - twin_model.evaluation_time
        inputs = dict()
        for column in twin_model_input_df.columns[1::]:
            inputs[column] = twin_model_input_df[column][data_index]
        twin_model.evaluate_step_by_step(step_size=step, inputs=inputs)
        outputs = [twin_model.evaluation_time]
        for item in twin_model.outputs:
            outputs.append(twin_model.outputs[item])
        sim_output_list_step.append(outputs)
        if twin_model_what_if is not None:
            inputs = dict()
            for column in twin_model_input_df.columns[1::]:
                inputs[column] = twin_model_input_df[column][data_index]/2.0 # the second Twin will be evaluated using same
                # inputs reduced by 50%
            twin_model_what_if.evaluate_step_by_step(step_size=step, inputs=inputs)
            outputs = [twin_model_what_if.evaluation_time]
            for item in twin_model_what_if.outputs:
                outputs.append(twin_model_what_if.outputs[item])
            sim_what_if_output_list_step.append(outputs)
        data_index += 1
    results_step_pd = pd.DataFrame(sim_output_list_step, columns=['Time'] + list(twin_model.outputs),
                                   dtype=float)

    outputs_names = list(twin_model.outputs)
    output_names_parallel = []
    for i in range(0,len(outputs_names)):
        output_names_parallel.append(outputs_names[i]+ ' - what-if : load reduced by 50%')
    results_what_if_step_pd = pd.DataFrame(sim_what_if_output_list_step, columns=['Time'] + output_names_parallel,
                                           dtype=float)








.. GENERATED FROM PYTHON SOURCE LINES 162-165

Post processing
~~~~~~~~~~~~~~~~~~~
Plotting the different results and saving the image on disk

.. GENERATED FROM PYTHON SOURCE LINES 165-167

.. code-block:: default


    plot_result_comparison(results_step_pd, results_what_if_step_pd)



.. image-sg:: /examples/evaluate/images/sphx_glr_03-scalarDROM_001.png
   :alt: Twin Runtime - What if analysis
   :srcset: /examples/evaluate/images/sphx_glr_03-scalarDROM_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.998 seconds)


.. _sphx_glr_download_examples_evaluate_03-scalarDROM.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03-scalarDROM.py <03-scalarDROM.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03-scalarDROM.ipynb <03-scalarDROM.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
