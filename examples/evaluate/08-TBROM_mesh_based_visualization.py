""".. _ref_example_TBROM_images:

3D field ROM example for images generation
------------------------------------------

This example shows how PyTwin can be used to load and evaluate a twin model to
visualize ROM results in the form of images with predefined views. The script
takes the inputs to evaluate the TBROM (twin builder ROM) and displays
the corresponding image.
A first image is generated using the point cloud-based ROM Viewer embedded in
the twin runtime. The second image is generated by loading the ROM results and
postprocessing the CFD mesh using PyFluent. Finally, ROM results are postprocessed
in the 3D viewer enabled by PyFluent. For more information, see the
`PyFluent-Visualization documentation <https://visualization.fluent.docs.pyansys.com>`_.

.. note::
   To generate snapshot files at initialization time, the ROM included in the twin
   must have its parameter ``field_data_storage_period`` set to ``0`` and its
   parameter ``store_snapshots`` set to ``1``.

   To generate images files at initialization time, the ROM included in the twin must
   have the **Embed Geometry** and **Generate Image** options enabled at export time.
   Additionally, its parameter ``viewX_storage_period`` must be set to ``0``.

   These parameters can be defined in the Twin Builder subsheet before twin compilation
   or be exposed as twin parameters.

"""

###############################################################################
# .. image:: /_static/TBROM_images_generation.png
#   :width: 400pt
#   :align: center

# sphinx_gallery_thumbnail_path = '_static/TBROM_images_generation.png'

###############################################################################
# Perform required imports
# ~~~~~~~~~~~~~~~~~~~~~~~~
# Perform required imports, which include downloading and importing the input
# files.

import os

import time
import numpy as np
import ansys.dpf.core as dpf
import pyvista as pv
from pytwin import TwinModel, download_file

# T-junction -> works OK with/without interpolation
#twin_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\T_junction\\ThermalTBROM_MC.twin"
#cfd_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\T_junction\\T_Junction.cas.h5"
#mapping_file = download_file("snapshot_mapping.bin", "other_files", force_download=False)
#mapping_file = download_file("snapshot_mapping2.bin", "other_files", force_download=False)
#rom_inputs = {"main_inlet_temperature": 353.15, "side_inlet_temperature": 293.15}

# Wind Tunnel -> works OK with/without interpolation
#twin_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\WindTunnel\\TwinWindTunnel.twin"
#cfd_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\WindTunnel\\truck_14m-1.cas.h5"
#rom_inputs = {"inlet_vel": 15}

# Mixing tank velocity vectors -> works OK with/without interpolation
#twin_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\MixingTank\\TwinMixingTank_23.twin"
#cfd_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\MixingTank\\Mixing-Tank-case-1.cas.h5"
#mapping_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\MixingTank\\udm-0\\Snapshots\\snapshot1.bin"
#rom_inputs = {"FluidDensity": 998.2, "FluidViscosity": 0.001003, "RPM": 12.565}

# Tatatsteel -> works OK with/without interpolation
#twin_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Presales\\APAC\\Tatasteel\\pyscripts\\sep6_1500_liqFrac.twin"
#cfd_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Presales\\APAC\\Tatasteel\\pyscripts\\1500mm-0.0134m-s.cas.h5"
#rom_inputs = {"superheat": 1820, "vel_inlet": 0.0134}
#mapping_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Presales\\APAC\\Tatasteel\\pyscripts\\rbp\\udm-0\\Snapshots\\snapshot2.bin"

# HX velocity vectors -> works OK with/without interpolation
twin_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\HX_vel\\TwinModel_HXVel.twin"
cfd_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\HX_vel\\HX-SAP-1.cas.h5"
rom_inputs = {"Mass_Flow_HX": 75.0, "Tube_temperature": 1115.0, "shell_inlet_temp": 300.0}
#mapping_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\HX_vel\\snapshot2.bin"

# FEA deformation field -> works OK with/without interpolation (no named selection)
#twin_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\FEADeformation\\TwinDeformation_23R2.twin"
#cfd_file = "C:\\Users\\cpetre\\OneDrive - ANSYS, Inc\\Desktop\\Work\\Twin\\2023\\Releases\\Planning\\24R2\\ROM_enhanced_viz\\FEADeformation\\file.rst"
#rom_inputs = {"Force_X_Component": 101.471}

###############################################################################
# Define ROM inputs
# ~~~~~~~~~~~~~~~~~
# Define the ROM inputs.




###############################################################################
# Load the twin runtime and generate temperature results
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load the twin runtime and generate temperature results from the TBROM.

start = time.time()

print("Loading model: {}".format(twin_file))
twin_model = TwinModel(twin_file)

twin_model.initialize_evaluation(inputs=rom_inputs)

rom_name = twin_model.tbrom_names[0]
rom_directory = twin_model.get_rom_directory(rom_name)
snapshot = twin_model.get_snapshot_filepath(rom_name)
geometry = twin_model.get_geometry_filepath(rom_name)

print(twin_model.outputs)
cur_time = time.time()-start
print('time : '+str(cur_time))

ds = dpf.DataSources()
ds.set_result_file_path(cfd_file, "cas")
streams = dpf.operators.metadata.streams_provider(data_sources=ds)

print('dpf reading target mesh...')

model = dpf.Model(data_sources=ds)
minfo = model.metadata.mesh_info
zone_names_vec = minfo.get_property("zone_names")
zone_ids = zone_names_vec.scoping.ids
zone_names = zone_names_vec.data
cell_zone_names = minfo.get_property("cell_zone_names").data
cell_zone_ids = minfo.get_property("cell_zone_names").scoping.ids
face_zone_names = minfo.get_property("face_zone_names").data
face_zone_ids = minfo.get_property("face_zone_names").scoping.ids
named_selections = twin_model.get_named_selections(rom_name)
ids = []


for i in range(0, len(named_selections)):
    ind = 0
    found = False
    while ind<len(zone_names) and found is not True:
        if zone_names[ind]==named_selections[i]:
            found = True
            ids.append(zone_ids[ind])
        else:
            ind = ind+1

print(zone_names)
print(zone_ids)
print(named_selections)
print(ids)


whole_mesh = dpf.operators.mesh.meshes_provider(streams_container=streams, region_scoping=ids).eval()
print('merging grids')
target_mesh = whole_mesh[-1].grid

target_mesh = target_mesh.merge([whole_mesh[i].grid for i in range(0, len(ids)-1)])
print(target_mesh)

#whole_mesh = dpf.operators.mesh.mesh_provider(streams_container=streams).eval()
#target_mesh = whole_mesh.grid

cur_time = time.time()-cur_time
print('time : '+str(cur_time))
print('points cloud to target mesh...')

#twin_model._tbroms[rom_name]._project_on_mesh(target_mesh, interpolate=False, named_selection = 'sparger_inlet')
#twin_model._tbroms[rom_name]._project_on_mesh(target_mesh, interpolate=False)
#twin_model._tbroms[rom_name]._project_on_mesh(target_mesh, interpolate=False, mapping_file=mapping)
#twin_model._tbroms[rom_name]._project_on_mesh(target_mesh, interpolate=True)
mesh_data = twin_model.project_tbrom_on_mesh(rom_name, target_mesh, False)


cur_time = time.time()-cur_time
print('time : '+str(cur_time))
print('final plot...')

boundary = mesh_data.decimate_boundary().extract_all_edges()

mesh_data = mesh_data.slice(normal=[1,0,0])
#mesh_data = mesh_data.slice(normal=[0,0,1])

#source_mesh = mesh_data.slice(normal=[0,-1,0], origin=[0, 0.93, 0])  # inlet surface
mesh_data.set_active_vectors(twin_model._tbroms[rom_name].field_output_name)
#streamlines = mesh_data.streamlines_from_source(source_mesh)
#print("Added arrays from streamlines filter:")
#print([array_name for array_name in streamlines.array_names if array_name not in mesh_data.array_names])

plotter = pv.Plotter()
plotter.add_axes()
#plotter.add_mesh(mesh_data)
#sargs = dict(vertical=True, title_font_size=16)
#plotter.add_mesh(
#    streamlines.tube(radius=0.2),
    #scalars="IntegrationTime",
    #clim=[0, 1000],
#    lighting=False,
#    scalar_bar_args=sargs,
#)

plotter.add_mesh(boundary, color="grey", opacity=0.1)
#plotter.add_mesh(source_mesh, color="red")
field_vector = mesh_data.glyph(factor=0.1)
plotter.add_mesh(field_vector, scalar_bar_args={'title': twin_model._tbroms[rom_name].field_output_name})

plotter.show()

cur_time = time.time()-cur_time
final = time.time()-start
print('time : '+str(cur_time))
print('total time : '+str(final))

ids = [6]
whole_mesh = dpf.operators.mesh.meshes_provider(streams_container=streams, region_scoping=ids).eval()
print('merging grids')
target_mesh = whole_mesh[-1].grid

target_mesh = target_mesh.merge([whole_mesh[i].grid for i in range(0, len(ids)-1)])
print(target_mesh)

mesh_data = twin_model.project_tbrom_on_mesh(rom_name, target_mesh, False, 'outlet')
mesh_data = mesh_data.cell_data_to_point_data()
plotter = pv.Plotter()
plotter.add_axes()
plotter.add_mesh(boundary, color="grey", opacity=0.25)
plotter.add_mesh(mesh_data)
plotter.camera_position = 'zx'
plotter.camera.azimuth += 180
plotter.show()


