name: CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

permissions:
  contents: read   # default for all jobs unless overridden

env:
  MAIN_PYTHON_VERSION: "3.13"
  DOCUMENTATION_CNAME: 'twin.docs.pyansys.com'
  LIBRARY_NAME: 'pytwin'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  

jobs:

  check-vulnerabilities:
    name: "Check library vulnerabilities"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-vulnerabilities@v10.1
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-package-name: ${{ env.LIBRARY_NAME }}
          dev-mode: ${{ github.ref != 'refs/heads/main' }}
          upload-reports: True
          hide-log: false

  actions-security:
    name: "Check actions security"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-actions-security@v10.1
        with:
          generate-summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          auditing-level: 'high'
          trust-ansys-actions: true

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
  #  needs: check-vulnerabilities
    steps:
      - uses: ansys/actions/code-style@v10.1

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
  #  needs: check-vulnerabilities
    steps:
      - uses: ansys/actions/doc-style@v10.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Build documentation"
    runs-on: pytwin-win10
    needs: doc-style
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: "Set up Python"
        uses: ansys/actions/_setup-python@v10.1
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-cache: false

      - name: "Copy source files for DPF server installation"
        shell: bash
        run: |
          cp -r ~ansys/Documents/devEnv/pyansys/pytwin/ansys_dpf_server_win_v2024.1.pre0/ ./
          
      - name: "Create virtual environment and Install Python library"
        run: |
          python -m venv .venv --clear
          .venv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install poetry

      - name: "Install documentation dependencies, including DPF server"
        run: |
          .venv\Scripts\Activate.ps1
          poetry install --extras graphics --with doc
          cd ansys_dpf_server_win_v2024.1.pre0
          pip install -e .
          cd ..

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: "Clean documentation build folder"
        run: |
          .venv\Scripts\Activate.ps1
          doc/make.bat clean

      - name: "Build HTML documentation"
        run: |
          .venv\Scripts\Activate.ps1
          doc/make.bat html
          if (Select-String -Path "doc/build_errors.txt" -Pattern "Traceback|ERROR|Error|error|Exception") {
            Write-Error "Documentation build failed due to detected errors in doc/build_errors.txt"
            exit 1
          }
        env:
          ANSYS_DPF_ACCEPT_LA: Y

      - name: "Upload HTML documentation artifact"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

  build-wheelhouse:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    needs: code-style
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@v10.1
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: Test library
    needs: build-wheelhouse
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
           os: [windows-latest, ubuntu-22.04]
           python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Install Ubuntu dependencies for RomViewerSharedLib.so
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install libosmesa6

      - name: Setup headless display
        if: matrix.os == 'windows-latest'
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: Run pytest
        uses: ansys/actions/tests-pytest@v10.1
        with:
          optional-dependencies-name: "tests,graphics"
          python-version: ${{ matrix.python-version }}
          pytest-extra-args: "--cov=pytwin --cov-report=term --cov-report=xml:.cov/coverage.xml --cov-report=html:.cov/html"
        env:
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.python-version }}_${{ matrix.os }}_pytest.html
          path: .cov/html
          retention-days: 7

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1

  build-library:
    name: "Smoke test and building"
    runs-on: ubuntu-latest
    needs: [doc-build, tests]
    steps:
      - uses: ansys/actions/build-library@v10.1
        with:
          library-name: "pytwin"
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release-pypi-public:
    name: "Release to public PyPI"
    runs-on: ubuntu-latest
    needs: build-library
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/release-pypi-public@v10.1
        with:
          library-name: "pytwin"
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    needs: doc-build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write   # allow pushing to gh-pages
    steps:
      - uses: ansys/actions/doc-deploy-dev@v10.1
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release-pypi-public
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    permissions:
      contents: write
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v10.1
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  automerge-prs:
    name: "Automerging dependabot and pre-commit.ci PRs"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: build-library
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: "Automerging PRs"
        uses: ansys/actions/hk-automerge-prs@v10.1
        with:
          approver: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          approver-token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
