[{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.tbrom_info.html#tbrom_info","title":"tbrom_info","text":"tbrom_info\n\n\n\nproperty TwinModel.tbrom_info\n\nDictionary with TBROM model names included in the twin model and their corresponding 3D visualization\ncapabilities. Such capabilities include snapshots and optionally generated images.\nIf a twin model has not been initialized, or if there is no TBROM in the twin model, None is\nreturned."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_close.html#twin_close","title":"twin_close","text":"twin_close\n\n\n\nTwinRuntime.twin_close()\n\nCloses the TWIN model. After this call, the TwinRuntime instance is\nno longer valid. Only a new model instance of TwinRuntime can be\ncreated before using other function calls."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_visualization_resources.html#twin_get_visualization_resources","title":"twin_get_visualization_resources","text":"twin_get_visualization_resources\n\n\n\nTwinRuntime.twin_get_visualization_resources()\n\nRetrieves a JSON-like data structure in string format with the\ninformation about model visualization resources available in the\nTWIN model. This method is only supported for Twin models created\nfrom one or more TBROM components.\n\nReturns\n\npython:str\n\nInformation about TBROM models visualization resources included\nin the TWIN. Example of output:"},{"objectID":"Home","href":"examples/00-twin_creation/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n01:02.594 total execution time for 1 file from examples00-twin_creation:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_00-twin_creation_00-TBROM_Twin_creation_evaluation.py (00-TBROM_Twin_creation_evaluation.py)\n\n01:02.594\n\n0.0"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.TBROM_VIEWS_KEY.html#tbrom_views_key","title":"TBROM_VIEWS_KEY","text":"TBROM_VIEWS_KEY\n\n\n\nTwinModel.TBROM_VIEWS_KEY = 'views'\n\n"},{"objectID":"Home","href":"api/examples/_autosummary/pytwin.download_file.html#download_file","title":"download_file","text":"download_file\n\n\n\npytwin.download_file(file_name, directory, force_download=False, destination=None)\n\nDownload a file that is used for a PyTwin example.\n\nThe files are downloaded from the PyTwin example files repository whose URL is given by the\npytwin.examples.downloads.EXAMPLES_REPO constant. All example files are downloaded to a persistent cache to\navoid downloading the same file twice.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the example file.\n\ndirectory\n\npython:str\n\nPath to the directory in the example files repository where the example file is stored.\n\nforce_download\n\nbool, optional\n\nWhether to force deletion of an example file so that it can be downloaded again. The default is False.\n\ndestination\n\npython:str, optional\n\nPath to download the example file to. The default is None, in which case the example file is\ndownloaded to the user’s temporary folder.\n\nReturns\n\npython:str\n\nPath to the downloaded example file.\n\nExamples\n\n>>> from pytwin import download_file\n>>> path = download_file(\"CoupledClutches_23R1_other.twin\", \"twin_files\", force_download=True)"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.name.html#name","title":"name","text":"name\n\n\n\nproperty TwinModel.name\n\nModel name. Multiple models can share the same name."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_rom_images_files.html#twin_get_rom_images_files","title":"twin_get_rom_images_files","text":"twin_get_rom_images_files\n\n\n\nTwinRuntime.twin_get_rom_images_files(model_name, views, time_from=-1, time_to=-1)\n\nRetrieves the model images from ‘time_from’ up to ‘time_to’ for the\ngiven views from the given TBROM model name. By default, it returns\nthe images for the current simulation step (for step-by-step\nsimulation) or for all previous steps (for batch model simulation).\nThis method is only supported for Twin models created from one\nor more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the images need to be retrieved.\n\nviews\n\npython:list\n\nView names for which the images need to be retrieved.\n\ntime_from\n\npython:float (optional)\n\nTime stamp from which images need to be retrieved.\n\ntime_to\n\npython:float (optional)\n\nTime stamp up to which images need to be retrieved.\n\nReturns\n\npython:list\n\nList of path of all the images retrieved"},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogLevel.PYTWIN_LOG_INFO.html#pytwin_log_info","title":"PYTWIN_LOG_INFO","text":"PYTWIN_LOG_INFO\n\n\n\nPyTwinLogLevel.PYTWIN_LOG_INFO = 20\n\n"},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.modify_pytwin_working_dir.html#modify_pytwin_working_dir","title":"modify_pytwin_working_dir","text":"modify_pytwin_working_dir\n\n\n\npytwin.modify_pytwin_working_dir(new_path, erase=True)\n\nModify the global PyTwin working directory.\n\nBy default, a temporary directory is used by PyTwin as working directory. This temporary directory is automatically\ncleaned up at exit of the python process that imported pytwin. When this method is used, the new PyTwin working\ndirectory won’t be deleted at python process exit. Note that this may lead to an overflow of the working directory.\n\nParameters\n\nnew_path: str\n\nAbsolute path to the working directory to use for PyTwin. The directory is created if it does not exist.\nThis directory is kept alive at python process exit.\n\nerase: bool, optional\n\nWhether to erase a non-empty existing working directory. The default is True,\nin which case the existing working directory is erased and a new one is created.\nIf False, the existing working directory is used as it is. This parameter has no\neffect if the directory does not exist.\n\nRaises\n\nPyTwinSettingsError\n\nIf provided path is None.\n\nIf provided path does not exist and some parent directories do not exist or the last parent\ndirectory does not have write permission.\n\nIf erase is not a Boolean value.\n\nExamples\n\n>>> # Modify working directory\n>>> from pytwin import modify_pytwin_working_dir\n>>> modify_pytwin_working_dir('path_to_new_working_dir', erase=False)"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nPyTwin provides Pythonic access to twin runtimes that were generated using\nAnsys Twin Builder and\nAnsys TwinAI.\n\nPyTwin supports twin runtimes generated using 2023 R1 and later."},{"objectID":"Home","href":"getting_started/index.html#licensing-requirements","title":"Getting started > Licensing requirements","text":"Licensing requirements\n\nFor twin runtimes generated with 2023 R1, the Ansys License Manager must have a license file with the\ntwin_builder_deployer feature available to use PyTwin.\n\nFor twin runtimes generated with 2023 R1 SP1 and later versions:\n\nif the TWIN file is exported as ‘licensed’, the Ansys License Manager must have a license file with the\ntwin_runtime feature available to use PyTwin.\n\nif the TWIN file is exported as ‘unlicensed’, no license is needed to use PyTwin\n\nBoth the features twin_builder_deployer and twin_runtime are included in the\nTwinAI license file. Here is how you define the environment variable for specifying the location of\nAnsys License Manager:"},{"objectID":"Home","href":"getting_started/index.html#twin-runtime-dependencies","title":"Getting started > Twin runtime dependencies","text":"Twin runtime dependencies\n\nThe pytwin package allows you to execute deployment workflows based on TWIN files\ngenerated by Ansys Twin Builder.\nTWIN files are generally made up of several types of models, including system-level models, ROMs\n(reduced order models), third-party models, and FMU (Functional Mock-up Unit) files. Each of these\nmodels can have specific runtime dependencies. For example, Modelica models cross-compiled with\nTwinAI on Ubuntu 20.04 have a dependency on libgfortran5.\n\nWhen executing twin runtimes through PyTwin on a specific environment, all dependencies of the\ntwin runtimes, including the ones of their constitutive models, must be properly installed\nand made available in that environment."},{"objectID":"Home","href":"getting_started/index.html#install-the-package","title":"Getting started > Install the package","text":"Install the package\n\nThe pytwin package supports Python 3.10 through Python 3.13 on Windows and Linux.\n\nInstall the latest release from PyPi\nwith this command:\n\nFor PyTwin workflows evaluating and post processing field results from TBROM included in a TWIN file\n(see ref_example_gallery), you need to install additional dependencies with :\n\nIf you plan on doing local development of PyTwin with Git, install\nthe latest release with this code:\n\nAny changes that you make locally are reflected in your setup after you restart\nthe Python kernel."},{"objectID":"Home","href":"getting_started/index.html#additional-pyansys-libraries","title":"Getting started > Additional PyAnsys libraries","text":"Additional PyAnsys libraries\n\nYou can install and use these additional PyAnsys libraries:\n\nPyAEDT, which provides access to Ansys\nTwin Builder for model creation and the generation of twin runtimes."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_platform_support.html#twin_platform_support","title":"twin_platform_support","text":"twin_platform_support\n\n\n\nstatic TwinRuntime.twin_platform_support(file_path)\n\nDetermines whether the TWIN model has Windows and/or Linux binaries.\n\nNote that “zip_handler.namelist()” might return different contents\ndepending on how the model archive was created. For example,\nFMUs and Twin models return the following list. Note that there\nare entries for binaries/linux64/ and binaries/win64/ folders.\n[\n‘binaries/’, ‘documentation/’, ‘resources/’, ‘modelDescription.xml’,\n‘binaries/linux64/’, ‘binaries/win64/’,\n‘binaries/linux64/ModelWith_Min50_Max150.so’,\n‘binaries/win64/ModelWith_Min50_Max150.dll’\n]\n\nFor a .tbrom model, the following list is returned. Note the absence\nof binaries/linux64/ and binaries/win64/ folders.\n[\n‘model.png’, ‘binaries/win64/rom24LP.dll’,\n‘binaries/win64/RomViewerSharedLib.dll’, ‘binaries/linux64/rom24LP.so’,\n‘binaries/linux64/RomViewerSharedLib.so’, ‘resources/properties.json’,\n‘resources/binaryOutputField/basis.svd’,\n‘resources/binaryOutputField/points.bin’,\n‘resources/binaryOutputField/settings.json’,\n‘resources/binaryOutputField/views.json’,\n‘resources/binaryOutputField/operationsDefinition.json’,\n‘resources/model.coreRom’, ‘modelDescription.xml’\n]\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the TWIN model.\n\nReturns\n\npython:dict\n\nDictionary indicating if Windows binaries are included (True) or\nnot (False), and Linux binaries are included (True) or not (False)."},{"objectID":"Home","href":"examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 0 files from examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nN/A\n\nN/A\n\nN/A"},{"objectID":"Home","href":"api/postprocessing/_autosummary/pytwin.stress_strain_component.html#stress_strain_component","title":"stress_strain_component","text":"stress_strain_component\n\n\n\npytwin.stress_strain_component(str_vectors, item, comp, effective_pr=None)\n\nReduce an array of stress or strain tensors to an array of scalar values.\n\nThe function applies transformations to return the following outputs at each input location from an input snapshot\nstress or strain vector:\n\nIndividual stress or strain normal or shear components.\n\nIndividual stress or strain principal components.\n\nStress or strain intensity.\n\nEquivalent (von Mises) stress or strain.\n\nMaximum shear stress or strain.\n\nAbsolute maximum principal stress.\n\nSigned equivalent (von Mises) stress.\n\nParameters\n\nstr_vectors\n\nnp.ndarray\n\n(n, 6) array of stress or strain vectors of symmetric Cauchy tensor components, X,Y,Z,XY,YZ,XZ.\n\nThis ordering is consistent with the conventions used in Ansys TBROM snapshots and Ansys Mechanical APDL\n(2.1.1. Stress-Strain Relationships).\n\nShear strains are interpreted as being the engineering shear strains, which are twice the tensor shear strains.\n\nPlanar stress or strain values can be entered by setting the relevant out-of-plane values to zero.\n\nitem\n\npython:str\n\nLabel identifying the result type of str_vectors. S for stress and E for strain.\n\ncomp\n\npython:str | python:int\n\nComponent of the item. See the table below in the notes section.\n\neffective_pr\n\npython:float | python:None, default = python:None\n\nEffective Poisson’s ratio for calculating equivalent strain. Assumed to be constant for all entries in\nstr_vectors. Refer to 2.4. Combined Stresses and Strains for potential values when handling strains other\nthan elastic strain.\n\nReturns\n\n(n,) array | (n,3) array\n\n(n,) array of the requested scalar stress or strain values, or (n, 3) array of principal component\ndirection vectors when dir1, dir2, dir3 are selected as the output component.\n\nRaises\n\nValueError\n\nif shape of str_vectors is not (n, 6).\n\nValueError\n\nif invalid combinations for item and comp are entered.\n\nValueError\n\nif item = E and comp = EQV and effective_pr is not given.\n\nNotes\n\nThis table lists the results values available to this method.\n\n\n\n\n\n\n\nitem\n\ncomp\n\nDescription\n\nS\n\nX, Y, Z, XY, YZ, XZ\n\nComponent stress.\n\n1, 2, 3\n\nPrincipal stress.\n\ndir1, dir2, dir3\n\nPrincipal stress direction cosine.\n\nINT\n\nStress intensity.\n\nEQV\n\nEquivalent (von Mises) stress.\n\nmaxShear\n\nMaximum shear stress\n\nabsMaxPrin\n\nAbsolute maximum principal stress.\n\nsgnEQV\n\nSigned equivalent (von Mises) stress.\n\nE\n\nX, Y, Z, XY, YZ, XZ\n\nComponent strain.\n\n1, 2, 3\n\nPrincipal strain.\n\ndir1, dir2, dir3\n\nPrincipal strain direction cosine.\n\nINT\n\nStrain intensity.\n\nEQV\n\nEquivalent (von Mises) strain.\n\nmaxShear\n\nMaximum shear strain\n\nOutputs are calculated as described in 2.4. Combined Stresses and Strains and 19.5.2.3. Maximum Shear in the\nAnsys Mechanical APDL and Ansys Mechanical help.\n\n\n\n\n\n\n\nExamples\n\n>>> import numpy as np\n>>> from pytwin import stress_strain_component\n>>> stress_vectors = np.array([[-10,50,0,40,0,0], [15,40,0,30,0,0]])\n>>> S_absMaxPrin = stress_strain_component(stress_vectors, 'S', 'absMaxPrin')\n>>> S_absMaxPrin\narray([70., 60.])\n\nCalculate equivalent strain for a material with Poisson’s ratio of 0.3 (for example steel). Input strains lie in the\nXZ plane.\n\n>>> strain_vectors = np.array([[-2.1e-4, 0.0, 5.0e-5, 0.0, 0.0, 1.5e-6]])\n>>> E_vonMises = stress_strain_component(strain_vectors, 'E', 'EQV', effective_pr=0.3)\n>>> E_vonMises\narray([0.00018382])"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_rom_output_basis.html#twin_get_rom_output_basis","title":"twin_get_rom_output_basis","text":"twin_get_rom_output_basis\n\n\n\nTwinRuntime.twin_get_rom_output_basis(model_name)\n\nRetrieve the output field basis for the given TBROM model name.\nThis method is only supported for Twin models created from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the basis needs to be retrieved.\n\nReturns\n\nbasis\n\nnp.ndarray\n\nSVD basis\n\nmodes\n\npython:int\n\nnumber of modes\n\nsize\n\npython:int\n\nfield size"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_min.html#twin_get_var_min","title":"twin_get_var_min","text":"twin_get_var_min\n\n\n\nTwinRuntime.twin_get_var_min(var_name)\n\nRetrieves the minimum value of a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:float\n\nMinimum value of the given variable."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.model_log.html#model_log","title":"model_log","text":"model_log\n\n\n\nproperty TwinModel.model_log\n\nPath to the model log file that is used at twin runtime instantiation."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.TBROM_SNAPSHOT_EXT.html#tbrom_snapshot_ext","title":"TBROM_SNAPSHOT_EXT","text":"TBROM_SNAPSHOT_EXT\n\n\n\nTwinModel.TBROM_SNAPSHOT_EXT = '.bin'\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_load_state.html#twin_load_state","title":"twin_load_state","text":"twin_load_state\n\n\n\nTwinRuntime.twin_load_state(load_from, do_fmi_init=True)\n\nLoad and set the TWIN states with the ones stored in the file\n‘load_from’ (including model values used in the TWIN when saving\nthe states).\n\nParameters\n\nload_from\n\npython:str\n\nPath of the file used to load the TWIN states.\n\ndo_fmi_init\n\nbool (optional)\n\nWhether to initialize the TWIN underlying models (True) or\nnot (False) before loading the states. Default value is True."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_model_dependencies.html#twin_get_model_dependencies","title":"twin_get_model_dependencies","text":"twin_get_model_dependencies\n\n\n\nstatic TwinRuntime.twin_get_model_dependencies(file_path)\n\nReturns the list of associated dependencies to the TWIN model and the\ncorresponding binaries found on the current environment where the TWIN\nis loaded. This method is supported only in a Linux OS.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the TWIN file for the twin model.\n\nReturns\n\npython:dict\n\nDictionary of TWIN model’s dependencies and the corresponding\nbinaries found."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_output_names.html#twin_get_output_names","title":"twin_get_output_names","text":"twin_get_output_names\n\n\n\nTwinRuntime.twin_get_output_names()\n\nRetrieves the names of outputs of the TWIN model.\n\nReturns\n\npython:list\n\nList of names of TWIN outputs"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.print_model_info.html#print_model_info","title":"print_model_info","text":"print_model_info\n\n\n\nTwinRuntime.print_model_info(max_var_to_print=inf)\n\nPrint all the model information including Twin Runtime version,\nmodel name, number of outputs, inputs, parameters, default simulation\nsettings, output names, input names and parameter names.\n\nParameters\n\nmax_var_to_print\n\npython:int (optional)\n\nMaximum number of variables for which the properties need to be\nevaluated, default value is numpy.inf."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_max.html#twin_get_var_max","title":"twin_get_var_max","text":"twin_get_var_max\n\n\n\nTwinRuntime.twin_get_var_max(var_name)\n\nRetrieves the maximum value of a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:float\n\nMaximum value of the given variable."},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#static-structural-analysis-and-optimization-using-3d-field-rom","title":"Static structural analysis and optimization using 3D field ROM","text":"Static structural analysis and optimization using 3D field ROM\n\nThis example shows how PyTwin can be used to perform different types of static structural analysis using 3D field ROM.\nA static structural model of a dog bone is created with Ansys Mechanical. A fixed support is applied on the right hand\nside, while a remote force is supplied on the left hand side. A non-linear structural analysis with plastic material\nbehavior (using steel) is performed to compute the resulting stress field and associated displacement. A static ROM\nhas been generated out of the original 3D model, so that the resulting Twin model can be evaluated using PyTwin,\ngiving the possibilities to evaluate multiple configurations and operating conditions quickly, while keeping\npredictions accuracy similar to original 3D FEA model. The PyTwin worklow illustrates different APIs usage to evaluate\nthe models at different conditions, visualize 3D detailed field results, as well as performing optimization and\ninverse problems.\n\nThis example uses similar functionalities and requirements as ref_example_TBROM_FEA_mesh_projection"},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#perform-required-imports","title":"Static structural analysis and optimization using 3D field ROM > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#definition-of-the-force-values-for-which-the-model-will-be-evaluated","title":"Static structural analysis and optimization using 3D field ROM > Definition of the force values for which the model will be evaluated","text":"Definition of the force values for which the model will be evaluated\n\nDefine the force range and step size and create a simple design of experiments with uniformly space values."},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#load-the-twin-runtime-and-generate-displacement-and-stress-results-for-different-forces-applied","title":"Static structural analysis and optimization using 3D field ROM > Load the twin runtime and generate displacement and stress results for different forces applied.","text":"Load the twin runtime and generate displacement and stress results for different forces applied.\n\nLoad the twin runtime, initialize and extract ROM related information."},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#results-analysis-2d-curves-as-well-as-3d-visualization-of-field-results","title":"Static structural analysis and optimization using 3D field ROM > Results analysis (2D curves, as well as 3D visualization of field results)","text":"Results analysis (2D curves, as well as 3D visualization of field results)\n\nPlot the maximum displacement and stress computed with respect to supplied force\n\n\n\n"},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#extract-the-fea-mesh-information-for-projection","title":"Static structural analysis and optimization using 3D field ROM > Extract the FEA mesh information for projection","text":"Extract the FEA mesh information for projection\n\nLoad the Mechanical rst file through PyDPF and extract the mesh"},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#project-the-deformation-field-rom-onto-the-targeted-mesh-and-visualize","title":"Static structural analysis and optimization using 3D field ROM > Project the deformation field ROM onto the targeted mesh, and visualize","text":"Project the deformation field ROM onto the targeted mesh, and visualize\n\nProjection is performed using nodal values since ROM is build from nodal deformation values. The default plotting\nmethod calculates the magnitude (norm) of the components for display."},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#project-the-stress-field-rom-onto-the-targeted-mesh-and-visualize","title":"Static structural analysis and optimization using 3D field ROM > Project the stress field ROM onto the targeted mesh, and visualize","text":"Project the stress field ROM onto the targeted mesh, and visualize\n\nProjection is performed using nodal values since ROM is build from nodal-averaged stress values.\nstress_strain_component(), is used to calculate the von Mises stress from the ROM stress tensor and this value\nis plotted."},{"objectID":"Home","href":"examples/02-tbrom_examples/06-TBROM_FEA_static_structural_optimization.html#using-the-twin-and-rom-for-inverse-problems","title":"Static structural analysis and optimization using 3D field ROM > Using the Twin and ROM for inverse problems","text":"Using the Twin and ROM for inverse problems\n\nIn this section, we are going to use a simple optimizer for inverse problems. For example, we want to determine what\nshould be the applied force to get a given maximum stress.\n\nTotal running time of the script: (0 minutes 22.458 seconds)\n\n\n\nDownload Jupyter notebook: 06-TBROM_FEA_static_structural_optimization.ipynb\n\nDownload Python source code: 06-TBROM_FEA_static_structural_optimization.py\n\nDownload zipped: 06-TBROM_FEA_static_structural_optimization.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_input_names.html#twin_get_input_names","title":"twin_get_input_names","text":"twin_get_input_names\n\n\n\nTwinRuntime.twin_get_input_names()\n\nRetrieves the names of inputs of the TWIN model.\n\nReturns\n\npython:list\n\nList of names of TWIN inputs"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.model_dir.html#model_dir","title":"model_dir","text":"model_dir\n\n\n\nproperty TwinModel.model_dir\n\nModel directory (within the global working directory)."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_input_by_index.html#twin_set_input_by_index","title":"twin_set_input_by_index","text":"twin_set_input_by_index\n\n\n\nTwinRuntime.twin_set_input_by_index(index, value)\n\nSet the current value of a single TWIN input specified by index.\n\nParameters\n\nindex\n\npython:int\n\nInput index.\n\nvalue\n\npython:float\n\nInput value."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_model_name.html#twin_get_model_name","title":"twin_get_model_name","text":"twin_get_model_name\n\n\n\nTwinRuntime.twin_get_model_name()\n\nRetrieves the name of the TWIN model.\n\nReturns\n\npython:str\n\nName of the TWIN model"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.load_dll.html#load_dll","title":"load_dll","text":"load_dll\n\n\n\nstatic TwinRuntime.load_dll(twin_runtime_library_path=None)\n\nLoad the TwinRuntime library.\n\nParameters\n\ntwin_runtime_library_path\n\npython:str (optional)\n\nFile path to the TWIN Runtime library. By default,\nit is located in a subfolder of the current working\ndirectory based on the OS\n(TwinRuntimeSDK.dll or libTwinRuntimeSDK.so).\n\nReturns\n\nctypes.cdll\n\nThe TwinRuntime loaded library in Python"},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#twin-evaluation-of-a-scalar-dynamic-rom","title":"Twin evaluation of a scalar dynamic ROM","text":"Twin evaluation of a scalar dynamic ROM\n\nThis example shows how you can use PyTwin to load and evaluate a twin model\nof a scalar dynamic ROM. The ROM is created from a 3D thermal model of a\nheat exchanger. The input is the heat flow. The outputs are the temperatures\nfrom three temperature probes. The workflow for this example performs what-if\nanalysis by deploying a second twin in parallel while simulating the original twin\nso that results from the different predictions can be compared. This comparison\nis done using methods for saving and loading twin states. This example also\nshows how to change the PyTwin working directory location from the default (%temp%)\nto a specified location, where logging files are available."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#perform-required-imports","title":"Twin evaluation of a scalar dynamic ROM > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#define-auxiliary-functions","title":"Twin evaluation of a scalar dynamic ROM > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary functions for comparing and plotting the results from\ntwo different simulations executed on the same twin model."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#change-the-working-directory","title":"Twin evaluation of a scalar dynamic ROM > Change the working directory","text":"Change the working directory\n\nChange the working directory from the default location (%temp%) to a specified\nlocation and load the input data."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#load-the-twin-runtime-and-instantiate-it","title":"Twin evaluation of a scalar dynamic ROM > Load the twin runtime and instantiate it","text":"Load the twin runtime and instantiate it\n\nLoad the twin runtime and instantiate it."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#define-the-inputs-of-the-twin-model-and-initialize-it","title":"Twin evaluation of a scalar dynamic ROM > Define the inputs of the twin model and initialize it","text":"Define the inputs of the twin model and initialize it\n\nDefine the inputs of the twin model, initialize it, and collect\nthe output values."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#simulate-the-twin-for-each-time-step","title":"Twin evaluation of a scalar dynamic ROM > Simulate the twin for each time step","text":"Simulate the twin for each time step\n\nLoop over all inputs, simulating the twin one time step at a\ntime and collecting the corresponding output values."},{"objectID":"Home","href":"examples/01-twin_examples/03-scalarDROM.html#plot-results","title":"Twin evaluation of a scalar dynamic ROM > Plot results","text":"Plot results\n\nPlot the results and save the images on disk.\n\n\n\nTotal running time of the script: (0 minutes 4.964 seconds)\n\n\n\nDownload Jupyter notebook: 03-scalarDROM.ipynb\n\nDownload Python source code: 03-scalarDROM.py\n\nDownload zipped: 03-scalarDROM.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.get_fmi_version.html#get_fmi_version","title":"get_fmi_version","text":"get_fmi_version\n\n\n\nstatic TwinRuntime.get_fmi_version(file_path)\n\nReturns the FMI version described in the given model or XML file.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the model description XML file for the twin model.\n\nReturns\n\npython:str\n\nFMI version of the model\n\nReturn type\n\nstr"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.model_properties_info_df.html#model_properties_info_df","title":"model_properties_info_df","text":"model_properties_info_df\n\n\n\nTwinRuntime.model_properties_info_df(var_names, max_var_to_print)\n\nEvaluate the properties (name, unit, data type, start value,\nminimum value, maximum values, description) of the given variables,\nwith a maximum number of variables to consider.\n\nParameters\n\nvar_names\n\npython:list\n\nList of variables names for which the variable properties need\nto be evaluated.\n\nmax_var_to_print\n\npython:int\n\nMaximum number of variables for which the properties need\nto be evaluated.\n\nReturns\n\npandas.DataFrame\n\nPandas dataframe storing the properties evaluated for the\ngiven variables and maximum number to consider."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_rom_input_basis.html#twin_get_rom_input_basis","title":"twin_get_rom_input_basis","text":"twin_get_rom_input_basis\n\n\n\nTwinRuntime.twin_get_rom_input_basis(model_name, field_name)\n\nRetrieve the input field basis for the given TBROM model name and field name.\nThis method is only supported for Twin models created from one or more TBROM components,\nand having input fields.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the basis needs to be retrieved.\n\nfield_name\n\npython:str\n\nInput field name of the TBROM for which the basis needs to be retrieved.\n\nReturns\n\nbasis\n\nnp.ndarray\n\nSVD basis\n\nmodes\n\npython:int\n\nnumber of modes\n\nsize\n\npython:int\n\nfield size"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_simulate_batch_mode_csv.html#twin_simulate_batch_mode_csv","title":"twin_simulate_batch_mode_csv","text":"twin_simulate_batch_mode_csv\n\n\n\nTwinRuntime.twin_simulate_batch_mode_csv(input_csv, output_csv, step_size=0, interpolate=0)\n\nSimulates the TWIN model in batch mode using given input CSV file and\nwrite the results in the output CSV file.\n\nParameters\n\ninput_csv\n\npython:str\n\nInput CSV file. First column represents time and the next ones\nrepresent inputs. Header is optional.\n\noutput_csv\n\npython:str\n\nOutput CSV file. If empty or NULL no output will be generated.\nFirst column represents time and the next ones represent outputs.\n\nstep_size\n\npython:float (optional)\n\nStep size. If 0, time points in the input table will be used as\nthe output points; otherwise it will produce output at an equal\nspacing of h. Default is 0.\n\ninterpolate\n\npython:int (optional)\n\nFlag to interpolate real continuous variables if step size > 0."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_quantity_type.html#twin_get_var_quantity_type","title":"twin_get_var_quantity_type","text":"twin_get_var_quantity_type\n\n\n\nTwinRuntime.twin_get_var_quantity_type(var_name)\n\nRetrieves the physical quantity type such as pressure,\ntemperature, etc. for a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:str\n\nPhysical quantity of the given variable returned as string."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.model_temp.html#model_temp","title":"model_temp","text":"model_temp\n\n\n\nproperty TwinModel.model_temp\n\nModel temporary directory (within the global working directory). This temporary directory\nis shared by all models."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.evaluate_batch.html#evaluate_batch","title":"evaluate_batch","text":"evaluate_batch\n\n\n\nTwinModel.evaluate_batch(inputs_df, field_inputs=None)\n\nEvaluate the twin model with historical input values given in a data frame.\n\nif field_inputs are supplied for a TBROM, they will override any input mode coefficient inputs for\nthat ROM that are included in inputs_df.\n\nParameters\n\ninputs_df: pandas.DataFrame\n\nHistorical input values stored in a Pandas dataframe. It must have a ‘Time’ column and all history\nfor the twin model inputs that you want to simulate. The dataframe must have one input per column,\nstarting at time instant t=0.(s). If a twin model input is not found in a dataframe column,\nthis input is kept constant to its initialization value. The column header must match with a\ntwin model input name.\n\nfield_inputs\n\npython:dict (optional)\n\nDictionary of snapshot file paths or snapshot Numpy arrays that must be used as field input at all\ntime instants given by the ‘inputs_df’ argument. One file path or array must be given per time\ninstant, for a field input of a TBROM included in the twin model, using following dictionary format:\n{“tbrom_name”: {“field_input_name”: [snapshot_t0, snapshot_t1, … ]}}\n\nReturns\n\noutput_df: pandas.DataFrame\n\nTwin output values associated with the input values stored in the Pandas dataframe.\n\nRaises\n\nTwinModelError:\n\nIf the pytwin.TwinModel.initialize_evaluation() method has not been called before.\nIf there is no ‘Time’ column in the input values stored in the Pandas dataframe.\nIf there is no time instant t=0.s in the input values stored in the Pandas dataframe.\nIf the list of snapshots given as field inputs has not one snapshot per time instant.\nIf the snapshots given as field inputs are not Numpy arrays or paths to snapshot files.\nIf the field inputs dictionary has bad TBROM or field input names.\n\nExamples\n\n>>> import pandas as pd\n>>> from pytwin import TwinModel\n>>>\n>>> # Example 1 - Batch evaluation with scalar inputs and scalar outputs\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> inputs_df = pd.DataFrame({'Time': [0., 1., 2.], 'input1': [1., 2., 3.], 'input2': [1., 2., 3.]})\n>>> twin_model.initialize_evaluation(inputs={'input1': 1., 'input2': 1.})\n>>> scalar_outputs_df = twin_model.evaluate_batch(inputs_df=inputs_df)\n>>>\n>>> # Example 2 - Batch evaluation with field inputs from disk and field output\n>>> model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> romname = model.tbrom_names[0]\n>>> fieldname = twin_model.get_field_input_names(romname)[0]\n>>> snapshot_filepath_t0 = 'path_to_snapshot_t0.twin'\n>>> twin_model.initialize_evaluation(field_inputs={romname: {fieldname: snapshot_filepath_t0})\n>>> inputs_df = pd.DataFrame({'Time': [0., 1., 2.]})\n>>> snapshot_filepaths = ['path_to_snapshot_t0.bin', 'path_to_snapshot_t1.bin', 'path_to_snapshot_t2.bin']\n>>> batch_results = twin_model.evaluate_batch(inputs_df=inputs_df,        field_inputs={romname: {fieldname: snapshot_filepaths})\n>>> output_snapshots = twin_model.generate_snapshot_batch(batch_results, romname)\n>>>\n>>> # Example 3 - Batch evaluation with field inputs from memory and field output\n>>> model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> romname = model.tbrom_names[0]\n>>> fieldname = twin_model.get_field_input_names(romname)[0]\n>>> snapshot_t0 = np.array([3.14, 2.71, 9.81, 6.02])\n>>> twin_model.initialize_evaluation(field_inputs={romname: {fieldname: snapshot_t0})\n>>> inputs_df = pd.DataFrame({'Time': [0., 1., 2.]})\n>>> snapshots = [snapshot_t0, snapshot_t1, snapshot_t2]\n>>> batch_results = twin_model.evaluate_batch(inputs_df=inputs_df,        field_inputs={romname: {fieldname: snapshots})\n>>> output_snapshots = twin_model.generate_snapshot_batch(batch_results, romname)"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_param_by_index.html#twin_set_param_by_index","title":"twin_set_param_by_index","text":"twin_set_param_by_index\n\n\n\nTwinRuntime.twin_set_param_by_index(index, value)\n\nSet the current value of a single TWIN parameter specified by index.\n\nParameters\n\nindex\n\npython:int\n\nParameter index.\n\nvalue\n\npython:float\n\nParameter value."},{"objectID":"Home","href":"examples/02-tbrom_examples/index.html#tbrom-evaluation-examples","title":"TBROM evaluation examples","text":"TBROM evaluation examples\n\nThese examples show how to use PyTwin to evaluate field results from TBROM included in a TWIN file.\nMultiple workflows are demonstrated such as image and field data generation (with possible processing of data to other\nAnsys tools like Fluent or Mechanical), TBROM evaluation with input field parameterization, output field visualization\nfor detailed post processing (including projection on CFD/FEA meshes).\n\nsphx_glr_examples_02-tbrom_examples_00-TBROM_images.py\n\nsphx_glr_examples_02-tbrom_examples_01-TBROM_dataTransfer_pyMAPDL.py\n\nsphx_glr_examples_02-tbrom_examples_02-TBROM_input_field.py\n\nsphx_glr_examples_02-tbrom_examples_03-TBROM_input_numpy_field.py\n\nsphx_glr_examples_02-tbrom_examples_04-TBROM_CFD_mesh_based_visualization.py\n\nsphx_glr_examples_02-tbrom_examples_05-TBROM_FEA_mesh_based_visualization.py\n\nsphx_glr_examples_02-tbrom_examples_06-TBROM_FEA_static_structural_optimization.py\n\nsphx_glr_examples_02-tbrom_examples_07-TBROM_parametric_field_history.py\n\n"},{"objectID":"Home","href":"api/examples/_autosummary/pytwin.snapshot_to_array.html#snapshot_to_array","title":"snapshot_to_array","text":"snapshot_to_array\n\n\n\npytwin.snapshot_to_array(snapshot_file, geometry_file)\n\nCreate an array containing the x, y, z coordinates and data from geometry\nand field snapshot files.\n\nParameters\n\nsnapshot_file\n\npython:str\n\nPath of the binary field data file to be read.\n\ngeometry_file\n\npython:str\n\nPath of the binary points data file to be read.\n\nReturns\n\nnp.ndarray\n\nReturn a 2D Numpy array of x,y,z coordinates and snapshot data read.\nArray has shape (m,n), where m is the number of points in the geometry\nfile and n is the dimension of the snapshot field + 3.\n\nRaises\n\nValueError\n\nif snapshot lengths are incompatible.\n\nExamples\n\n>>> from pytwin import snapshot_to_array\n>>> snapshot_data = snapshot_to_array('snapshot.bin', 'points.bin')"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_input_by_name.html#twin_set_input_by_name","title":"twin_set_input_by_name","text":"twin_set_input_by_name\n\n\n\nTwinRuntime.twin_set_input_by_name(input_name, value)\n\nSet the current value of a single TWIN input specified by name.\n\nParameters\n\ninput_name\n\npython:str\n\nInput name.\n\nvalue\n\npython:float\n\nInput value."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_available_view_names.html#get_available_view_names","title":"get_available_view_names","text":"get_available_view_names\n\n\n\nTwinModel.get_available_view_names(rom_name)\n\nGet a list of view names for a ROM (reduced order model) in the twin model.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM in the twin model. To get a list of available ROMs,\nsee the pytwin.TwinModel.get_available_view_names attribute.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.get_available_view_names(rom_name=model.tbrom_names[0])"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_rom_snapshot_files.html#twin_get_rom_snapshot_files","title":"twin_get_rom_snapshot_files","text":"twin_get_rom_snapshot_files\n\n\n\nTwinRuntime.twin_get_rom_snapshot_files(model_name, time_from=-1, time_to=-1)\n\nRetrieves the model snapshots files from ‘time_from’ up to ‘time_to’\nfor the given TBROM model name. By default, it returns the snapshots\nfiles for the current simulation step (for step-by-step simulation)\nor for all previous steps (for batch model simulation).\nThis method is only supported for Twin models created from one\nor more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the snapshot files\nneed to be retrieved.\n\ntime_from\n\npython:float (optional)\n\nTime stamp from which the snapshot files need to be retrieved.\n\ntime_to\n\npython:float (optional)\n\nTime stamp up to which the snapshot files need to be retrieved.\n\nReturns\n\npython:list\n\nList of path of all the snapshots files retrieved"},{"objectID":"Home","href":"examples/02-tbrom_examples/03-TBROM_input_numpy_field.html#3d-field-rom-example-for-field-snapshot-input-and-output-as-numpy-array","title":"3D field ROM example for field snapshot input and output as Numpy array","text":"3D field ROM example for field snapshot input and output as Numpy array\n\nThis example shows how the example given in ref_example_TBROM_inputField\ncan be modified to take inputs as Numpy arrays, rather than reading from disk.\nSimilarly, outputs are produced as Numpy arrays.\n\nThe results arrays will be unflattened and results combined into a DataFrame of\nx, y and z location and corresponding x, y and z displacement components.\n\nResults will be exported for the whole model and a named selection consisting\nonly of the bolts.\n\nTo be able to use the functionalities to generate an output field snapshot\non demand, you must have a twin with one or more TBROMs.\n\nTo project an input field snapshot, one or more of the TBROMs must be\nparameterized by input field data.\n\nTo be able to use the functionalities to generate points file on demand for\na TBROM, the geometry must have been embedded when exporting the TBROMs to\nTwin Builder, prior to building the twin.\n\nThe twin inputs and outputs must follow specific naming conventions,\nsummarised here and described in detail in\nref_example_TBROM_inputField.\n\nIf there are multiple TBROMs in the twin, the format for the name of the\ntwin input must be {input_field_name}_mode_{mode_index}_{tbrom_name}\nand the output must be outField_mode_{mode_index}_{tbrom_name}.\n\nIf there is a single TBROM in the twin, the format for the name of the\ntwin input must be {input_field_name}_mode_{mode_index} and the output\nmust be outField_mode_{mode_index}."},{"objectID":"Home","href":"examples/02-tbrom_examples/03-TBROM_input_numpy_field.html#perform-required-imports","title":"3D field ROM example for field snapshot input and output as Numpy array > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/02-tbrom_examples/03-TBROM_input_numpy_field.html#define-auxiliary-functions","title":"3D field ROM example for field snapshot input and output as Numpy array > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary function to unflatten a vector."},{"objectID":"Home","href":"examples/02-tbrom_examples/03-TBROM_input_numpy_field.html#define-rom-inputs","title":"3D field ROM example for field snapshot input and output as Numpy array > Define ROM inputs","text":"Define ROM inputs\n\nDefine the twin scalar input pressure as 4 MPa.\n\nRead one vector input from a file (this input could have been generated by a\nseparate program).\n\nEnter information regarding TBROM, input fields and output named selection\n(see ref_example_TBROM_inputField for examples of setting this\nprogrammatically)."},{"objectID":"Home","href":"examples/02-tbrom_examples/03-TBROM_input_numpy_field.html#load-the-twin-runtime-and-generate-displacement-results","title":"3D field ROM example for field snapshot input and output as Numpy array > Load the twin runtime and generate displacement results","text":"Load the twin runtime and generate displacement results\n\nLoad the twin runtime and generate temperature results from the TBROM."},{"objectID":"Home","href":"examples/02-tbrom_examples/03-TBROM_input_numpy_field.html#evaluate-the-twin-with-one-set-of-input-values-and-collect-corresponding-outputs","title":"3D field ROM example for field snapshot input and output as Numpy array > Evaluate the twin with one set of input values and collect corresponding outputs","text":"Evaluate the twin with one set of input values and collect corresponding outputs\n\nBecause the twin is based on a static model, results for any inputs can be\nobtained by setting the initial input values to the desired values and running\nthe initialization function.\n\nUnflatten vectors and combine into DataFrame. Both point location and\ndisplacement have three components when unflattening.\n\nRepeat for the subset of results on the bolts only\n\nTotal running time of the script: (0 minutes 1.561 seconds)\n\n\n\nDownload Jupyter notebook: 03-TBROM_input_numpy_field.ipynb\n\nDownload Python source code: 03-TBROM_input_numpy_field.py\n\nDownload zipped: 03-TBROM_input_numpy_field.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_data_type.html#twin_get_var_data_type","title":"twin_get_var_data_type","text":"twin_get_var_data_type\n\n\n\nTwinRuntime.twin_get_var_data_type(var_name)\n\nRetrieves the data type of a given variable\n(“Real”, “Integer”, “Boolean”, “Enumeration”, or String) by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:str\n\nData type of the given variable returned as string."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_number_of_deployments_from_instance.html#twin_number_of_deployments_from_instance","title":"twin_number_of_deployments_from_instance","text":"twin_number_of_deployments_from_instance\n\n\n\nTwinRuntime.twin_number_of_deployments_from_instance()\n\nReturns the expected number of deployments for the current TWIN model\ninstance as defined at the export time.\n\nReturns\n\npython:int\n\nNumber of expected number of deployments for the TWIN model."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_is_cross_platform.html#twin_is_cross_platform","title":"twin_is_cross_platform","text":"twin_is_cross_platform\n\n\n\nstatic TwinRuntime.twin_is_cross_platform(file_path)\n\nReturns whether the loaded TWIN model is cross-platform\n(Windows and Linux) compiled or not.\n\nNote that “zip_handler.namelist()” might return different contents\ndepending on how the model archive was created. For example,\nFMUs and Twin models return the following list. Note that there\nare entries for binaries/linux64/ and binaries/win64/ folders.\n[\n‘binaries/’, ‘documentation/’, ‘resources/’, ‘modelDescription.xml’,\n‘binaries/linux64/’, ‘binaries/win64/’,\n‘binaries/linux64/ModelWith_Min50_Max150.so’,\n‘binaries/win64/ModelWith_Min50_Max150.dll’\n]\n\nFor a .tbrom model, the following list is returned. Note the absence\nof binaries/linux64/ and binaries/win64/ folders.\n[\n‘model.png’, ‘binaries/win64/rom24LP.dll’,\n‘binaries/win64/RomViewerSharedLib.dll’, ‘binaries/linux64/rom24LP.so’,\n‘binaries/linux64/RomViewerSharedLib.so’, ‘resources/properties.json’,\n‘resources/binaryOutputField/basis.svd’,\n‘resources/binaryOutputField/points.bin’,\n‘resources/binaryOutputField/settings.json’,\n‘resources/binaryOutputField/views.json’,\n‘resources/binaryOutputField/operationsDefinition.json’,\n‘resources/model.coreRom’, ‘modelDescription.xml’\n]\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the TWIN file for the twin model.\n\nReturns\n\nbool\n\nTrue if the TWIN model has binaries for Windows and Linux"},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogLevel.PYTWIN_LOG_DEBUG.html#pytwin_log_debug","title":"PYTWIN_LOG_DEBUG","text":"PYTWIN_LOG_DEBUG\n\n\n\nPyTwinLogLevel.PYTWIN_LOG_DEBUG = 10\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.model_filepath.html#model_filepath","title":"model_filepath","text":"model_filepath\n\n\n\nproperty TwinModel.model_filepath\n\nFilepath for the twin model that has been verified and loaded.\nIf the filepath is not valid, None is returned."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.get_twin_version.html#get_twin_version","title":"get_twin_version","text":"get_twin_version\n\n\n\nstatic TwinRuntime.get_twin_version(file_path)\n\nReturns whether the loaded TWIN model is a valid model or not, as well\nas the Twin Builder version used to compile it.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the TWIN model.\n\nReturns\n\n(bool, python:str)\n\nTrue if the TWIN model is a valid model, False otherwise.\nTwin Builder version used to compile it."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.html#twinmodel","title":"TwinModel","text":"TwinModel\n\n\n\nclass pytwin.TwinModel(model_filepath)\n\nEvaluates a twin model in a TWIN file created by Ansys Twin Builder.\n\nAfter a twin model is initialized, it can be evaluated with two modes (step-by-step or batch).\nto make predictions. Parametric workflows are also supported.\n\nParameters\n\nmodel_filepath\n\npython:str\n\nFile path to the TWIN file for the twin model.\n\nExamples\n\nCreate the twin model given the file path to the TWIN file. Initialize two parameters and two inputs of\nthe twin model. Then, evaluate the two steps and retrieve the results in a dictionary.\n\n>>> from pytwin import TwinModel\n>>>\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>>\n>>> twin_model.initialize_evaluation(parameters={'param1': 1., 'param2': 2.}, inputs={'input1': 1., 'input2': 2.})\n>>> outputs = dict()\n>>> outputs['Time'] = [twin_model.evaluation_time]\n>>> outputs['output1'] = [twin_model.outputs['output1']]\n>>> outputs['output2'] = [twin_model.outputs['output2']]\n>>>\n>>> twin_model.evaluate_step_by_step(step_size=0.1, inputs={'input1': 10., 'input2': 20.})\n>>> outputs['Time'].append(twin_model.evaluation_time)\n>>> outputs['output1'].append(twin_model.outputs['output1'])\n>>> outputs['output2'].append(twin_model.outputs['output2'])\n>>>\n>>> twin_model.evaluate_step_by_step(step_size=0.1, inputs={'input1': 20., 'input2': 30.})\n>>> outputs['Time'].append(twin_model.evaluation_time)\n>>> outputs['output1'].append(twin_model.outputs['output1'])\n>>> outputs['output2'].append(twin_model.outputs['output2'])\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_outputs.html#twin_get_outputs","title":"twin_get_outputs","text":"twin_get_outputs\n\n\n\nTwinRuntime.twin_get_outputs()\n\nRetrieves the current value of all the TWIN outputs.\n\nReturns\n\npython:list\n\nList of outputs value."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_number_inputs.html#twin_get_number_inputs","title":"twin_get_number_inputs","text":"twin_get_number_inputs\n\n\n\nTwinRuntime.twin_get_number_inputs()\n\nRetrieves the number of inputs of the TWIN model.\n\nReturns\n\npython:int\n\nNumber of inputs of the TWIN model"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.generate_snapshot.html#generate_snapshot","title":"generate_snapshot","text":"generate_snapshot\n\n\n\nTwinModel.generate_snapshot(rom_name, on_disk=True, named_selection=None)\n\nGenerate a field snapshot based on current states of the Twin, either in memory or on disk, for the full field\nor a specific part. It returns the field data as an array if in memory, or the path of the snapshot written on\ndisk.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the TBROM considered to generate the snapshot.\n\non_disk\n\nbool\n\nWhether the snapshot file is saved on disk (True which is the default) or returned in memory (False).\n\nnamed_selection\n\npython:str (optional)\n\nNamed selection on which the snasphot has to be generated.\n\nReturns\n\npython:str | np.ndarray\n\nPath to snapshot written to disk if on_disk == True, else array of snapshot field data\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object has not been initialized.\nIf rom_name is not included in the Twin’s list of TBROM\nIf TBROM hasn’t its mode coefficients outputs connected to the twin’s outputs.\nIf name_selection is not included in the TBROM’s list of Named Selections\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> # Instantiate a twin model, initialize it, and evaluate it step by step until you want to save its state\n>>> model1 = TwinModel('model.twin')\n>>> model1.initialize_evaluation()\n>>> romname = model1.tbrom_names[0]\n>>> nslist = model1.get_named_selections(romname)\n>>> fieldresults = model1.generate_snapshot(romname, False, nslist[0])"},{"objectID":"Home","href":"api/examples/index.html#other-functions","title":"Other functions","text":"Other functions\n\nOther PyTwin functions are available and used in ref_example_gallery.\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_description.html#twin_get_var_description","title":"twin_get_var_description","text":"twin_get_var_description\n\n\n\nTwinRuntime.twin_get_var_description(var_name)\n\nRetrieves the description string for a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:str\n\nDescription of the given variable returned as string."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#twin-evaluation-of-a-3d-field-rom-and-data-transfer-to-fea-model-inputs","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs","text":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs\n\nThis example shows how PyTwin can be used to load and evaluate a twin model to\npredict CFD results in the form of temperature fields. Temperature fields are\nused as inputs for an FEA thermal structural analysis of a T-junction that considers\nthe mixing of two different flow temperatures. The example uses PyTwin to evaluate\nthe twin results and convert them to an appropriate format. It then uses PyMAPDL to\nload the FEA model, apply the temperature loads coming from the twin, and perform\nthe thermal structural analysis.\n\nTo generate snapshot files at initialization time, the ROM included in the twin\nmust have its parameter field_data_storage_period set to 0 and its\nparameter store_snapshots set to 1.\n\nTo generate images files at initialization time, the ROM included in the twin must\nhave the Embed Geometry and Generate Image options enabled at export time.\nAdditionally, its parameter viewX_storage_period must be set to 0.\n\nThese parameters can be defined in the Twin Builder subsheet before twin compilation\nor be exposed as twin parameters."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#perform-required-imports-and-launch-an-instance-of-mapdl","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Perform required imports and launch an instance of MAPDL","text":"Perform required imports and launch an instance of MAPDL\n\nPerform required imports, which include downloading and importing the input\nfiles, and launch an instance of MAPDL."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#define-inputs","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Define inputs","text":"Define inputs\n\nDefine inputs."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#import-and-save-the-mesh","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Import and save the mesh","text":"Import and save the mesh\n\nReset MAPDL and import the geometry."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#load-the-twin-runtime-and-generate-temperature-results","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Load the twin runtime and generate temperature results","text":"Load the twin runtime and generate temperature results\n\nLoad the twin runtime and generate temperature results for the FEA mesh."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#map-temperature-data-to-fea-mesh","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Map temperature data to FEA mesh","text":"Map temperature data to FEA mesh\n\nMap the temperature data to the FEA mesh."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#apply-loads-and-boundary-conditions-and-solve-the-model","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Apply loads and boundary conditions and solve the model","text":"Apply loads and boundary conditions and solve the model\n\nApply loads and boundary conditions and then solve the model."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#plot-equivalent-stress","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Plot equivalent stress","text":"Plot equivalent stress\n\nPlot equivalent stress."},{"objectID":"Home","href":"examples/02-tbrom_examples/01-TBROM_dataTransfer_pyMAPDL.html#exit-mapdl-instance","title":"Twin evaluation of a 3D field ROM and data transfer to FEA model inputs > Exit MAPDL instance","text":"Exit MAPDL instance\n\nExit the MAPDL instance.\n\nTotal running time of the script: (0 minutes 45.140 seconds)\n\n\n\nDownload Jupyter notebook: 01-TBROM_dataTransfer_pyMAPDL.ipynb\n\nDownload Python source code: 01-TBROM_dataTransfer_pyMAPDL.py\n\nDownload zipped: 01-TBROM_dataTransfer_pyMAPDL.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_default_rom_image_directory.html#twin_get_default_rom_image_directory","title":"twin_get_default_rom_image_directory","text":"twin_get_default_rom_image_directory\n\n\n\nTwinRuntime.twin_get_default_rom_image_directory(model_name)\n\nRetrieves the default directory in the local filesystem where ROM\nimages will be saved for the TBROM model name. This method is only\nsupported for Twin models created from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM.\n\nReturns\n\npython:str\n\nAbsolute path to the resources directory."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_snapshot_filepath.html#get_snapshot_filepath","title":"get_snapshot_filepath","text":"get_snapshot_filepath\n\n\n\nTwinModel.get_snapshot_filepath(rom_name, evaluation_time=0.0)\n\nGet the snapshot file that was created by the given ROM at the given time instant.\n\nThe snapshot file contains the field results of the ROM.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nevaluation_time: float, optional\n\nEvaluation time at which to get the snapshot file. The default is 0.00`. If no\nsnapshot file is available at this evaluation time, the method returns ``None.\nTwo evaluation times can be distinguished up to six digits after the comma.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object has not been initialized.\nIf TwinModel object does not include any TBROMs.\nIf provided ROM name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.initialize_evaluation()\n>>> available_rom_names = model.tbrom_names\n>>> geometry_filepath = TwinModel.get_snapshot_filepath(rom_name=available_rom_names[0])"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.inputs.html#inputs","title":"inputs","text":"inputs\n\n\n\nproperty TwinModel.inputs\n\nDictionary with input values at the current evaluation time."},{"objectID":"Home","href":"examples/02-tbrom_examples/07-TBROM_parametric_field_history.html#3d-parametric-field-history-rom-example","title":"3D parametric field history ROM example","text":"3D parametric field history ROM example\n\nThis example shows how to use PyTwin to load and evaluate a twin model built upon a\nparametric field history ROM. Such ROM, created with Static ROM Builder, has parameters\nthat can be changed from one evaluation to another, and will output field predictions over\na time grid. The example shows how to evaluate and post process the results at different\ntime points.\n\nThe example model is a simplified 3D mechanical frame tightened by two bolts.\nThe bolts are represented as forces applied to the tips of the component.\nThe magnitude of the deformation is dependent on the magnitude of both force\nparameters. Additionally, this component is made of a material that exhibits\ntime-dependent behavior, allowing the structure to undergo a mechanical\nphenomenon known as creep. Essentially, the deformation of the structure\nchanges over time, even under constant applied forces, which makes the problem\nsuitable for parametric field history ROM.\n\nTo be able to use the functionalities illustrated in this example, you\nmust have a twin with one or more TBROMs. The output mode coefficients for the TBROMs\nmust be enabled when exporting the TBROMs and connected to twin outputs following\nthese conventions:\n\nIf there are multiple TBROMs in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}_{tbrom_name}.\n\nIf there is a single TBROM in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}.\n\nTo be able to use the functionalities to visualize the results, you need to have a Twin with 1 or\nmore TBROM, for which its geometry is embedded when exporting the TBROMs to Twin Builder"},{"objectID":"Home","href":"examples/02-tbrom_examples/07-TBROM_parametric_field_history.html#perform-required-imports","title":"3D parametric field history ROM example > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input files."},{"objectID":"Home","href":"examples/02-tbrom_examples/07-TBROM_parametric_field_history.html#define-rom-scalar-inputs","title":"3D parametric field history ROM example > Define ROM scalar inputs","text":"Define ROM scalar inputs\n\nDefine the ROM scalar inputs."},{"objectID":"Home","href":"examples/02-tbrom_examples/07-TBROM_parametric_field_history.html#load-the-twin-runtime-and-generate-displacement-results","title":"3D parametric field history ROM example > Load the twin runtime and generate displacement results","text":"Load the twin runtime and generate displacement results\n\nLoad the twin runtime, initialize the evaluation and display displacement results from the TBROM."},{"objectID":"Home","href":"examples/02-tbrom_examples/07-TBROM_parametric_field_history.html#evaluate-the-twin-at-different-time-points-3d-field-visualization","title":"3D parametric field history ROM example > Evaluate the twin at different time points (3D field visualization)","text":"Evaluate the twin at different time points (3D field visualization)\n\nBecause the twin is based on a parametric field history ROM, the entire field\nhistory has been computed during the Twin initialization. In order to visualize\nthe results at different time points, the Twin can be advanced and simulated\nover time. A linear interpolation is performed in case the time selected\nis between two time steps of the field history."},{"objectID":"Home","href":"examples/02-tbrom_examples/07-TBROM_parametric_field_history.html#evaluate-the-twin-at-different-time-points-time-series","title":"3D parametric field history ROM example > Evaluate the twin at different time points (time series)","text":"Evaluate the twin at different time points (time series)\n\nIf we continue simulating the Twin over time, the field results won’t change\nanymore since we have reached the end time of the field history. To evaluate the ROM\nagain, it needs to be re-initialized, with the possibility to change input parameters values.\nIn this section, we will see how to build and visualize a transient prediction\nat a given location.\n\n\n\nTotal running time of the script: (0 minutes 7.186 seconds)\n\n\n\nDownload Jupyter notebook: 07-TBROM_parametric_field_history.ipynb\n\nDownload Python source code: 07-TBROM_parametric_field_history.py\n\nDownload zipped: 07-TBROM_parametric_field_history.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_status_string.html#twin_get_status_string","title":"twin_get_status_string","text":"twin_get_status_string\n\n\n\nTwinRuntime.twin_get_status_string()\n\nRetrieves the status of the last operation if the result\nis not TWIN_STATUS_OK.\n\nReturns\n\npython:str\n\nString of the status retrieved."},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n07:40.148 total execution time for 13 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_02-tbrom_examples_00-TBROM_images.py (..\\..\\examples\\02-tbrom_examples\\00-TBROM_images.py)\n\n02:11.091\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_04-TBROM_CFD_mesh_based_visualization.py (..\\..\\examples\\02-tbrom_examples\\04-TBROM_CFD_mesh_based_visualization.py)\n\n01:42.118\n\n0.0\n\nsphx_glr_examples_01-twin_examples_01-electricRange.py (..\\..\\examples\\01-twin_examples\\01-electricRange.py)\n\n01:05.246\n\n0.0\n\nsphx_glr_examples_00-twin_creation_00-TBROM_Twin_creation_evaluation.py (..\\..\\examples\\00-twin_creation\\00-TBROM_Twin_creation_evaluation.py)\n\n01:02.594\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_01-TBROM_dataTransfer_pyMAPDL.py (..\\..\\examples\\02-tbrom_examples\\01-TBROM_dataTransfer_pyMAPDL.py)\n\n00:45.140\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_06-TBROM_FEA_static_structural_optimization.py (..\\..\\examples\\02-tbrom_examples\\06-TBROM_FEA_static_structural_optimization.py)\n\n00:22.458\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_07-TBROM_parametric_field_history.py (..\\..\\examples\\02-tbrom_examples\\07-TBROM_parametric_field_history.py)\n\n00:07.186\n\n0.0\n\nsphx_glr_examples_01-twin_examples_00-coupledClutches.py (..\\..\\examples\\01-twin_examples\\00-coupledClutches.py)\n\n00:06.540\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_02-TBROM_input_field.py (..\\..\\examples\\02-tbrom_examples\\02-TBROM_input_field.py)\n\n00:05.002\n\n0.0\n\nsphx_glr_examples_01-twin_examples_03-scalarDROM.py (..\\..\\examples\\01-twin_examples\\03-scalarDROM.py)\n\n00:04.964\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_05-TBROM_FEA_mesh_based_visualization.py (..\\..\\examples\\02-tbrom_examples\\05-TBROM_FEA_mesh_based_visualization.py)\n\n00:03.559\n\n0.0\n\nsphx_glr_examples_01-twin_examples_02-heatExchangerRS.py (..\\..\\examples\\01-twin_examples\\02-heatExchangerRS.py)\n\n00:02.690\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_03-TBROM_input_numpy_field.py (..\\..\\examples\\02-tbrom_examples\\03-TBROM_input_numpy_field.py)\n\n00:01.561\n\n0.0"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.load_state.html#load_state","title":"load_state","text":"load_state\n\n\n\nTwinModel.load_state(model_id, evaluation_time, epsilon=1e-08)\n\nLoad a state that has been saved by a twin model instantiated with the same TWIN file.\n\nCalling this method replaces evaluation initialization.\n\nParameters\n\nmodel_id\n\npython:str\n\nID of the model that saved the state.\n\nevaluation_time\n\npython:float\n\nEvaluation time at which the state was saved.\n\nepsilon\n\npython:float, optional\n\nAbsolute period that is added before and after the evaluation time to account for\nround-off error while searching the saved state. The default value is 1e-8.\nThe search is performed in the interval [t-epsilon, t+epsilon] with t being\nthe evaluation time. The first saved state found in this interval is loaded.\n\nRaises\n\nTwinModelError:\n\nIf no state has been saved by the model with the given model ID and same model name\nas the one calling this method.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> # Instantiate a TwinModel, initialize it and evaluate it step by step until you want to save its state\n>>> model1 = TwinModel('model.twin')\n>>> model1.initialize_evaluation()\n>>> model1.evaluate_step_by_step(step_size=0.1)\n>>> model1.save_state()\n>>> # Instantiate a new TwinModel with same twin file and load the saved state\n>>> model2 = TwinModel('model.twin')\n>>> model2.load_state(model_id=model1.id, evaluation_time=model1.evaluation_time)\n>>> model2.evaluate_step_by_step(step_size=0.1)"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_output_by_index.html#twin_get_output_by_index","title":"twin_get_output_by_index","text":"twin_get_output_by_index\n\n\n\nTwinRuntime.twin_get_output_by_index(index)\n\nRetrieves the current value of a single TWIN output specified by index.\n\nReturns\n\npython:float\n\nOutput value."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_instantiate.html#twin_instantiate","title":"twin_instantiate","text":"twin_instantiate\n\n\n\nTwinRuntime.twin_instantiate()\n\nInstantiates the TWIN model."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.evaluate_twin_status.html#evaluate_twin_status","title":"evaluate_twin_status","text":"evaluate_twin_status\n\n\n\nstatic TwinRuntime.evaluate_twin_status(twin_status, twin_runtime, method_name)\n\nReturns the current status message associated to the TWIN if its\nstatus is TWIN_STATUS_WARNING. Raises a TwinRuntimeError if the TWIN’s\nstatus is TWIN_STATUS_ERROR or TWIN_STATUS_FATAL.\n\nParameters\n\ntwin_status\n\npython:int\n\nCurrent status of the TWIN model\n\ntwin_runtime\n\nTwinRuntime\n\nTwinRuntime instance associated to the TWIN model\n\nmethod_name\n\npython:str\n\nMethod executed when the TWIN’s status is evaluated"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_enable_rom_model_images.html#twin_enable_rom_model_images","title":"twin_enable_rom_model_images","text":"twin_enable_rom_model_images\n\n\n\nTwinRuntime.twin_enable_rom_model_images(model_name, views)\n\nEnables the ROM image generation for the given model name and views in\nthe next time steps (until disabled). If the image generation is\nalready enabled, behavior remains unchanged. This method is only\nsupported for Twin models created from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the image generation needs\nto be enabled.\n\nviews\n\npython:list\n\nView names for which the image generation needs to be enabled."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.get_model_name.html#get_model_name","title":"get_model_name","text":"get_model_name\n\n\n\nstatic TwinRuntime.get_model_name(file_path)\n\nReads the description file of the source model to discover\nthe model name.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the source model file (it could be a .fmu\nor modelDescription.xml).\n\nReturns\n\npython:str\n\nName of the model.\n\nReturn type\n\nstr"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_str_var_start.html#twin_get_str_var_start","title":"twin_get_str_var_start","text":"twin_get_str_var_start\n\n\n\nTwinRuntime.twin_get_str_var_start(var_name)\n\nRetrieves the start value of a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:str\n\nStart value of the given variable returned as string."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_unit.html#twin_get_var_unit","title":"twin_get_var_unit","text":"twin_get_var_unit\n\n\n\nTwinRuntime.twin_get_var_unit(var_name)\n\nRetrieves the unit string of a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:str\n\nUnit of the given variable returned as string."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_disable_rom_model_images.html#twin_disable_rom_model_images","title":"twin_disable_rom_model_images","text":"twin_disable_rom_model_images\n\n\n\nTwinRuntime.twin_disable_rom_model_images(model_name, views)\n\nDisables the ROM image generation for the given model name and views\nin the next time steps. If the image generation is already disabled,\nbehavior remains unchanged. This method is only supported for Twin\nmodels created from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the image generation needs\nto be disabled.\n\nviews\n\npython:list\n\nView names for which the image generation needs to be disabled."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.full_model_properties_info_df.html#full_model_properties_info_df","title":"full_model_properties_info_df","text":"full_model_properties_info_df\n\n\n\nTwinRuntime.full_model_properties_info_df()\n\nEvaluate the properties (name, unit, quantity type, start value,\nminimum value, maximum values, description) of all the model’s\nvariables (inputs, outputs, parameters).\n\nReturns\n\npandas.DataFrame\n\nPandas dataframe storing all the properties evaluated for all\nthe model’s variables."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_output_by_name.html#twin_get_output_by_name","title":"twin_get_output_by_name","text":"twin_get_output_by_name\n\n\n\nTwinRuntime.twin_get_output_by_name(output_name)\n\nRetrieves the current value of a single TWIN output specified by name.\n\nReturns\n\npython:float\n\nOutput value."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.parameters.html#parameters","title":"parameters","text":"parameters\n\n\n\nproperty TwinModel.parameters\n\nDictionary with parameter values at the current evaluation time."},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#3d-field-rom-example-with-cfd-mesh-based-visualization","title":"3D field ROM example with CFD mesh based visualization","text":"3D field ROM example with CFD mesh based visualization\n\nThis example shows how PyTwin can be used to load and evaluate a twin model, and visualize\nthe ROM results on a CFD mesh.\nOnce the twin model is evaluated, PyDPF is used to read in the CFD mesh on which the ROM\nresults will be projected. PyVista is then used to perform the 3D visualization with different\noptions. For more information, see the\nPyDPF documentation and\nPyVista documentation.\n\nThis example uses PyDPF which requires a DPF server installation (version 2024 R1-pre0 or higher)\nas a first step. More information on how to download and install DPF server is available here :\nhttps://dpf.docs.pyansys.com/version/stable/getting_started/index.html#install-dpf-server\n\nTo be able to use the functionalities to project an output field on a mesh, you\nmust have a twin with one or more TBROMs. The output mode coefficients for the TBROMs\nmust be enabled when exporting the TBROMs and connected to twin outputs following\nthese conventions:\n\nIf there are multiple TBROMs in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}_{tbrom_name}.\n\nIf there is a single TBROM in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}.\n\nTo be able to use the functionalities to project an output field on a mesh with interpolation,\nyou need to have a Twin with 1 or more TBROM, for which its geometry is embedded when\nexporting the TBROMs to Twin Builder\n\nTo be able to use the functionalities to project an output field on a given named selection,\nyou need to have a Twin with 1 or more TBROM, for which Named Selections are defined."},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#perform-required-imports","title":"3D field ROM example with CFD mesh based visualization > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#define-rom-inputs","title":"3D field ROM example with CFD mesh based visualization > Define ROM inputs","text":"Define ROM inputs\n\nDefine the ROM inputs."},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#load-the-twin-runtime-and-generate-temperature-results","title":"3D field ROM example with CFD mesh based visualization > Load the twin runtime and generate temperature results","text":"Load the twin runtime and generate temperature results\n\nLoad the twin runtime, initialize and extract ROM related information."},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#extract-the-cfd-mesh-information-for-projection","title":"3D field ROM example with CFD mesh based visualization > Extract the CFD mesh information for projection","text":"Extract the CFD mesh information for projection\n\nLoad the Fluent cas file through PyDPF and extract all the zones associated to the ROM’s named selections"},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#project-the-tbrom-field-onto-the-targeted-mesh","title":"3D field ROM example with CFD mesh based visualization > Project the TBROM field onto the targeted mesh","text":"Project the TBROM field onto the targeted mesh\n\nThe projection is performed without interpolation. In that case, it is assumed that the TBROM points have the same\norder as the CFD cells to which they are associated to. This is ensured if the same CFD mesh is used for the\nprojection as the one used to generate the training data for this ROM."},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#post-processing-and-field-visualization-using-pyvista-part-1","title":"3D field ROM example with CFD mesh based visualization > Post processing and field visualization using PyVista (part 1)","text":"Post processing and field visualization using PyVista (part 1)\n\nCreation of the scene and results to display (e.g. velocity vectors field on cross section on top of geometry)"},{"objectID":"Home","href":"examples/02-tbrom_examples/04-TBROM_CFD_mesh_based_visualization.html#post-processing-and-field-visualization-using-pyvista-part-2","title":"3D field ROM example with CFD mesh based visualization > Post processing and field visualization using PyVista (part 2)","text":"Post processing and field visualization using PyVista (part 2)\n\nCreation of the scene and results to display (e.g. velocity magnitude on a given boundary on top of geometry)\n\nTotal running time of the script: (1 minutes 42.118 seconds)\n\n\n\nDownload Jupyter notebook: 04-TBROM_CFD_mesh_based_visualization.ipynb\n\nDownload Python source code: 04-TBROM_CFD_mesh_based_visualization.py\n\nDownload zipped: 04-TBROM_CFD_mesh_based_visualization.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.model_log_link.html#model_log_link","title":"model_log_link","text":"model_log_link\n\n\n\nproperty TwinModel.model_log_link\n\nPath to the symbolic link to the model log file."},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.modify_pytwin_logging.html#modify_pytwin_logging","title":"modify_pytwin_logging","text":"modify_pytwin_logging\n\n\n\npytwin.modify_pytwin_logging(new_option=PyTwinLogOption.PYTWIN_LOGGING_OPT_FILE, new_level=PyTwinLogLevel.PYTWIN_LOG_INFO)\n\nModify global PyTwin logging.\n\nYou can choose to take these actions:\n\nRedirect logging to a log file.\n\nRedirect logging to the console.\n\nDisable logging.\n\nAll PyTwin objects from the same Python process share the same logging options.\nTo fine tune the logging level, use the new_level parameter. For more\ninformation, see the examples.\n\nParameters\n\nnew_option\n\nPyTwinLogOption\n\nOption to use for PyTwin logging.\n\nnew_level: PyTwinLogLevel\n\nLevel to use for PyTwin logging.\n\nRaises\n\nPyTwinSettingsError\n\nIf new_option is not a valid PyTwinLogOption attribute.\nIf new_level is not a valid PyTwinLogLevel attribute.\n\nExamples\n\n>>> from pytwin import modify_pytwin_logging, get_pytwin_log_file\n>>> from pytwin import PYTWIN_LOGGING_OPT_FILE, PYTWIN_LOG_DEBUG\n>>> #\n>>> # Redirect logging to a file in the working directory and set logging level to DEBUG level\n>>> modify_pytwin_logging(new_option=PYTWIN_LOGGING_OPT_FILE, new_level=PYTWIN_LOG_DEBUG)\n>>> print(get_pytwin_log_file())\n>>> #\n>>> # Redirect logging to the console\n>>> from pytwin import modify_pytwin_logging, PYTWIN_LOGGING_OPT_CONSOLE\n>>> modify_pytwin_logging(PYTWIN_LOGGING_OPT_CONSOLE)\n>>> #\n>>> # Disable logging\n>>> from pytwin import modify_pytwin_logging, PYTWIN_LOGGING_OPT_NOLOGGING\n>>> modify_pytwin_logging(PYTWIN_LOGGING_OPT_NOLOGGING)"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_rom_resource_directory.html#twin_get_rom_resource_directory","title":"twin_get_rom_resource_directory","text":"twin_get_rom_resource_directory\n\n\n\nTwinRuntime.twin_get_rom_resource_directory(model_name)\n\nRetrieves the absolute path of the resource directory for the\ngiven TBROM model name. This method is only supported for Twin\nmodels created from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the resource directory needs\nto be retrieved.\n\nReturns\n\npython:str\n\nAbsolute path to the resources’ directory of the TBROM model."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.tbrom_directory_path.html#tbrom_directory_path","title":"tbrom_directory_path","text":"tbrom_directory_path\n\n\n\nproperty TwinModel.tbrom_directory_path\n\nTBROM directory path. This is the directory where temporary TBROM files are stored.\n\nThis folder is created at TBROM initialization by the Twin Runtime SDK.\nIt contains one folder per TBROM with folder name equals to TBROM name."},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nAnyone who wants to use PyTwin can import its Python modules and develop\nPython code to integrate and deploy twin runtimes, as\nexplained in ref_index_api and demonstrated in ref_example_gallery."},{"objectID":"Home","href":"user_guide/index.html#global-settings","title":"User guide > Global settings","text":"Global settings\n\nBy default, logging is enabled in PyTwin at a level of INFO. Simulation output\nfiles are generated in the %temp%/pytwin folder. You can change these global\nsettings at anytime using these functions:\n\nFor information on all APIs, see ref_index_api_logging."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.tbrom_names.html#tbrom_names","title":"tbrom_names","text":"tbrom_names\n\n\n\nproperty TwinModel.tbrom_names\n\nList of available TBROM names. If there is no TBROM in the twin model, an empty list is returned.\n\nIt is the name of TBROM component that was used in the subsheet to compile the TWIN file in Twin Builder."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.TBROM_IMAGE_EXT.html#tbrom_image_ext","title":"TBROM_IMAGE_EXT","text":"TBROM_IMAGE_EXT\n\n\n\nTwinModel.TBROM_IMAGE_EXT = '.png'\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_number_params.html#twin_get_number_params","title":"twin_get_number_params","text":"twin_get_number_params\n\n\n\nTwinRuntime.twin_get_number_params()\n\nRetrieves the number of parameters of the TWIN model.\n\nReturns\n\npython:int\n\nNumber of parameters of the TWIN model"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.evaluate_step_by_step.html#evaluate_step_by_step","title":"evaluate_step_by_step","text":"evaluate_step_by_step\n\n\n\nTwinModel.evaluate_step_by_step(step_size, inputs=None, field_inputs=None)\n\nEvaluate the twin model at time instant t plus a step size given inputs at time instant t.\n\nTwin model evaluation must have been initialized before calling this evaluation method.\nFor more information, see the pytwin.TwinModel.initialize_evaluation() method.\n\nif field_inputs are supplied for a TBROM, they will override any input mode coefficient inputs for\nthat ROM that are included in inputs.\n\nParameters\n\nstep_size\n\npython:float\n\nStep size in seconds to reach the next time step. The value must be positive.\n\ninputs\n\npython:dict (optional)\n\nDictionary of scalar input values ({“name”: value}) at time instant t. An input is not updated if\nthe associated key is not found in the twin model’s input_names property. If values for\ninputs are not provided in the dictionary, their current values are kept.\n\nfield_inputs\n\npython:dict (optional)\n\nDictionary of input fields snapshots ({“tbromname”: {“inputfieldname”: snapshot}}) to use for twin model\nevaluation. snapshot may be a Numpy array, or string for path of snapshot file.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>>\n>>> # Example 1 - Evaluate step by step with scalar inputs and scalar outputs\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.initialize_evaluation()\n>>> twin_model.evaluate_step_by_step(step_size=0.1, inputs={'input1': 1., 'input2': 2.})\n>>> scalar_results = {'Time': twin_model.evaluation_time, 'Outputs': twin_model.outputs}\n>>>\n>>> # Example 2 - Evaluate step by step with field input from disk and field output to disk\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.initialize_evaluation()\n>>> romname = twin_model.tbrom_names[0]\n>>> fieldname = twin_model.get_field_input_names(romname)[0]\n>>> twin_model.evaluate_step_by_step(step_size=0.1, inputs={'input1': 1., 'input2': 2.},\n>>>                                  field_inputs={romname: {fieldname:'path_to_the_snapshot.bin'}})\n>>> field_output = twin_model.generate_snapshot(rom_name=romname, on_disk=True)\n>>> field_results = {'Time': twin_model.evaluation_time, 'Field': field_output}\n>>>\n>>> # Example 3 - Evaluate step by step with field input from memory and field output in memory\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.initialize_evaluation()\n>>> romname = twin_model.tbrom_names[0]\n>>> fieldname = twin_model.get_field_input_names(romname)[0]\n>>> snapshot = np.array([3.14, 2.71, 9.81, 6.02])\n>>> twin_model.evaluate_step_by_step(step_size=0.1, inputs={'input1': 1., 'input2': 2.},\n>>>                                  field_inputs={romname: {fieldname:snapshot}})\n>>> field_output = twin_model.generate_snapshot(rom_name=romname, on_disk=False)\n>>> field_results = {'Time': twin_model.evaluation_time, 'Field': field_output}"},{"objectID":"Home","href":"examples/00-twin_creation/index.html#twin-creation-examples","title":"Twin creation examples","text":"Twin creation examples\n\nThese examples show how to use additional functionalities to create TWIN file (for example using PyAEDT).\n\nsphx_glr_examples_00-twin_creation_00-TBROM_Twin_creation_evaluation.py\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_str_param_by_name.html#twin_set_str_param_by_name","title":"twin_set_str_param_by_name","text":"twin_set_str_param_by_name\n\n\n\nTwinRuntime.twin_set_str_param_by_name(param_name, value)\n\nSet the value of a single TWIN string parameter specified by name.\n\nParameters\n\nparam_name\n\npython:str\n\nParameter name.\n\nvalue\n\npython:float\n\nParameter value."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#twin-evaluation","title":"Twin evaluation","text":"Twin evaluation\n\nThis example shows how you can use PyTwin to load and evaluate a twin model.\nThe model consists of three coupled clutches. It has four inputs (applied torque\nand the three clutch openings) and three outputs (the computed torque on each clutch)."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#perform-required-imports","title":"Twin evaluation > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the\ninput files."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#define-auxiliary-functions","title":"Twin evaluation > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary functions for comparing and plotting the results from\ndifferent simulations executed on the same twin model."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#load-the-twin-runtime-and-external-csv-file","title":"Twin evaluation > Load the twin runtime and external CSV file","text":"Load the twin runtime and external CSV file\n\nLoad the twin runtime and instantiate it."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#define-the-initial-inputs-of-the-twin-model-and-initialize-it","title":"Twin evaluation > Define the initial inputs of the twin model and initialize it","text":"Define the initial inputs of the twin model and initialize it\n\nDefine the inputs of the twin model, initialize it, and collect\nthe output values."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#simulate-the-twin-in-step-by-step-mode","title":"Twin evaluation > Simulate the twin in step by step mode","text":"Simulate the twin in step by step mode\n\nLoop over all inputs, simulating the twin at each time step\nand collecting the corresponding output values."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#simulate-the-twin-in-batch-mode","title":"Twin evaluation > Simulate the twin in batch mode","text":"Simulate the twin in batch mode\n\nReset/re-initialize the twin and run the simulation in batch mode, which\npasses all the input data, simulates all the data points, and collects all\nthe outputs at once."},{"objectID":"Home","href":"examples/01-twin_examples/00-coupledClutches.html#plot-results","title":"Twin evaluation > Plot results","text":"Plot results\n\nPlot the results and save the images on disk.\n\n\n\nTotal running time of the script: (0 minutes 6.540 seconds)\n\n\n\nDownload Jupyter notebook: 00-coupledClutches.ipynb\n\nDownload Python source code: 00-coupledClutches.py\n\nDownload zipped: 00-coupledClutches.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogLevel.PYTWIN_LOG_WARNING.html#pytwin_log_warning","title":"PYTWIN_LOG_WARNING","text":"PYTWIN_LOG_WARNING\n\n\n\nPyTwinLogLevel.PYTWIN_LOG_WARNING = 30\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_image_filepath.html#get_image_filepath","title":"get_image_filepath","text":"get_image_filepath\n\n\n\nTwinModel.get_image_filepath(rom_name, view_name, evaluation_time=0.0)\n\nGet the image file that was created by the given ROM at the given time instant. The image file shows the field\nresults of the ROM in the given predefined view.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see\nthe pytwin.TwinModel.tbrom_names attribute.\n\nview_name\n\npython:str\n\nView name associated with the rendering view in which ROM results are displayed. To get\na list of available rendering view names for a given ROM, use the\npytwin.TwinModel.get_available_view_names() method.\n\nevaluation_time: float, optional\n\nEvaluation time at which to get the image file. The default is 0.0. If no\nimage file is available at the time specified, this method returns None.\nTwo evaluation times can be distinguished up to six digits after the comma.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object has not been initialized.\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\nIf the provided view name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.initialize_evaluation()\n>>> rom_name = model.tbrom_names[0]\n>>> view_name = model.get_available_view_names(rom_name)[0]\n>>> geometry_filepath = TwinModel.get_image_filepath(rom_name, view_name)"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.initialization_time.html#initialization_time","title":"initialization_time","text":"initialization_time\n\n\n\nproperty TwinModel.initialization_time\n\nFloating point number that is the time at which the twin model has been initialized.\nThe value is given in seconds since the epoch."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_default_simulation_settings.html#twin_get_default_simulation_settings","title":"twin_get_default_simulation_settings","text":"twin_get_default_simulation_settings\n\n\n\nTwinRuntime.twin_get_default_simulation_settings()\n\nRetrieves the default simulation settings\n(end time, step size and tolerance) associated with the TWIN.\n\nReturns\n\npython:list\n\nA list of float representing the end time, step size\nand tolerance values"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_enable_3d_rom_model_data.html#twin_enable_3d_rom_model_data","title":"twin_enable_3d_rom_model_data","text":"twin_enable_3d_rom_model_data\n\n\n\nTwinRuntime.twin_enable_3d_rom_model_data(model_name)\n\nEnables the generation of 3D data (mode coefficients and optionally\nsnapshots files) for the given model name in the next time steps.\nIf the 3D generation is already enabled, behavior remains unchanged.\nThis method is only supported for Twin models created from one or more\nTBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which 3D data generation needs\nto be enabled."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_reset.html#twin_reset","title":"twin_reset","text":"twin_reset\n\n\n\nTwinRuntime.twin_reset()\n\nResets the state of the TWIN model back to the instantiated state."},{"objectID":"Home","href":"api/evaluate/index.html#evaluate","title":"Evaluate","text":"Evaluate\n\nThe TwinModel class implements a higher-level\nabstraction to facilitate the manipulation and execution of a twin model.\n\n"},{"objectID":"Home","href":"api/evaluate/index.html#workflow-example","title":"Evaluate > Workflow example","text":"Workflow example\n\nThis code shows how to set up and evaluate a twin model."},{"objectID":"Home","href":"examples/02-tbrom_examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n05:18.115 total execution time for 8 files from examples02-tbrom_examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_02-tbrom_examples_00-TBROM_images.py (00-TBROM_images.py)\n\n02:11.091\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_04-TBROM_CFD_mesh_based_visualization.py (04-TBROM_CFD_mesh_based_visualization.py)\n\n01:42.118\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_01-TBROM_dataTransfer_pyMAPDL.py (01-TBROM_dataTransfer_pyMAPDL.py)\n\n00:45.140\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_06-TBROM_FEA_static_structural_optimization.py (06-TBROM_FEA_static_structural_optimization.py)\n\n00:22.458\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_07-TBROM_parametric_field_history.py (07-TBROM_parametric_field_history.py)\n\n00:07.186\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_02-TBROM_input_field.py (02-TBROM_input_field.py)\n\n00:05.002\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_05-TBROM_FEA_mesh_based_visualization.py (05-TBROM_FEA_mesh_based_visualization.py)\n\n00:03.559\n\n0.0\n\nsphx_glr_examples_02-tbrom_examples_03-TBROM_input_numpy_field.py (03-TBROM_input_numpy_field.py)\n\n00:01.561\n\n0.0"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_inputs.html#twin_set_inputs","title":"twin_set_inputs","text":"twin_set_inputs\n\n\n\nTwinRuntime.twin_set_inputs(input_array)\n\nSet the current value of all the TWIN inputs.\n\nParameters\n\ninput_array\n\npython:list\n\nList of inputs value."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.TBROM_FOLDER_NAME.html#tbrom_folder_name","title":"TBROM_FOLDER_NAME","text":"TBROM_FOLDER_NAME\n\n\n\nTwinModel.TBROM_FOLDER_NAME = 'ROM_files'\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_param_names.html#twin_get_param_names","title":"twin_get_param_names","text":"twin_get_param_names\n\n\n\nTwinRuntime.twin_get_param_names()\n\nRetrieves the names of parameters of the TWIN model.\n\nReturns\n\npython:list\n\nList of names of TWIN parameters"},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#parametric-dynamic-twin-evaluation","title":"Parametric dynamic twin evaluation","text":"Parametric dynamic twin evaluation\n\nThis example shows how you can use PyTwin to load and evaluate a twin model\nand simulate multiple parametric variations. The model is used for\ndetermining the range of an electric vehicle. The vehicle is represented\nby a battery, the electric loads of the vehicle, and an electric machine\nconnected to a simple 1D chassis. The driver controls the vehicle speed\nto follow a repeated sequence of the WLTP cycle (class 3). The mass of the\nvehicle and the electric power loads are parameterized so that their\neffects on the overall electric range can be seen."},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#perform-required-imports","title":"Parametric dynamic twin evaluation > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#define-auxiliary-functions","title":"Parametric dynamic twin evaluation > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary functions for comparing and plotting the results from\ndifferent parametric simulations executed on the same twin model."},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#load-the-twin-runtime-and-instantiate-it","title":"Parametric dynamic twin evaluation > Load the twin runtime and instantiate it","text":"Load the twin runtime and instantiate it\n\nLoad the twin runtime and instantiate it."},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#define-inputs-and-simulation-settings","title":"Parametric dynamic twin evaluation > Define inputs and simulation settings","text":"Define inputs and simulation settings\n\nDefine the inputs and simulation settings."},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#simulate-the-twin-for-each-set-of-parameter-values","title":"Parametric dynamic twin evaluation > Simulate the twin for each set of parameter values","text":"Simulate the twin for each set of parameter values\n\nSimulate the twin for each set of parameters values for each time step\nand collect corresponding output values."},{"objectID":"Home","href":"examples/01-twin_examples/01-electricRange.html#plot-results","title":"Parametric dynamic twin evaluation > Plot results","text":"Plot results\n\nPlot the results and save the images on disk.\n\n\n\nTotal running time of the script: (1 minutes 5.246 seconds)\n\n\n\nDownload Jupyter notebook: 01-electricRange.ipynb\n\nDownload Python source code: 01-electricRange.py\n\nDownload zipped: 01-electricRange.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#3d-field-rom-example-for-images-generation","title":"3D field ROM example for images generation","text":"3D field ROM example for images generation\n\nThis example shows how PyTwin can be used to load and evaluate a twin model to\nvisualize ROM results in the form of images with predefined views. The script\ntakes the inputs to evaluate the TBROM (twin builder ROM) and displays\nthe corresponding image.\nA first image is generated using the point cloud-based ROM Viewer embedded in\nthe twin runtime. The second image is generated by loading the ROM results and\npostprocessing the CFD mesh using PyFluent. Finally, ROM results are postprocessed\nin the 3D viewer enabled by PyFluent. For more information, see the\nPyFluent-Visualization documentation.\n\nTo generate snapshot files at initialization time, the ROM included in the twin\nmust have its parameter field_data_storage_period set to 0 and its\nparameter store_snapshots set to 1.\n\nTo generate images files at initialization time, the ROM included in the twin must\nhave the Embed Geometry and Generate Image options enabled at export time.\nAdditionally, its parameter viewX_storage_period must be set to 0.\n\nThese parameters can be defined in the Twin Builder subsheet before twin compilation\nor be exposed as twin parameters."},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#perform-required-imports","title":"3D field ROM example for images generation > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#define-rom-inputs","title":"3D field ROM example for images generation > Define ROM inputs","text":"Define ROM inputs\n\nDefine the ROM inputs."},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#define-auxiliary-functions","title":"3D field ROM example for images generation > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine the auxiliary function for converting a ROM snapshot for data mapping\non a CFD mesh."},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#load-the-twin-runtime-and-generate-temperature-results","title":"3D field ROM example for images generation > Load the twin runtime and generate temperature results","text":"Load the twin runtime and generate temperature results\n\nLoad the twin runtime and generate temperature results from the TBROM."},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#postprocess-with-image-generated-by-point-cloud-based-rom-viewer","title":"3D field ROM example for images generation > Postprocess with image generated by point cloud-based ROM Viewer","text":"Postprocess with image generated by point cloud-based ROM Viewer\n\nPostprocess with the image generated by the point cloud-based ROM Viewer.\n\n"},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#postprocess-with-image-generated-by-pyfluent","title":"3D field ROM example for images generation > Postprocess with image generated by PyFluent","text":"Postprocess with image generated by PyFluent\n\nPostprocess with the image generated by PyFluent.\n\n"},{"objectID":"Home","href":"examples/02-tbrom_examples/00-TBROM_images.html#postprocess-rom-results-in-3d-viewer","title":"3D field ROM example for images generation > Postprocess ROM results in 3D Viewer","text":"Postprocess ROM results in 3D Viewer\n\nPostprocess the ROM results in the 3D Viewer enabled by PyFluent.\n\nTotal running time of the script: (2 minutes 11.091 seconds)\n\n\n\nDownload Jupyter notebook: 00-TBROM_images.ipynb\n\nDownload Python source code: 00-TBROM_images.py\n\nDownload zipped: 00-TBROM_images.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/postprocessing/index.html#post-processing-functions","title":"Post-processing functions","text":"Post-processing functions\n\nPyTwin functions to perform physics-specific post-processing operations.\n\n"},{"objectID":"Home","href":"api/postprocessing/index.html#workflow-example","title":"Post-processing functions > Workflow example","text":"Workflow example\n\nThis code show how the functions may be used to calculate equivalent strain for a material with Poisson’s ratio of 0.3\n(for example steel) where input strains lie in the XZ plane. See\nref_example_TBROM_FEA_static_structural_optimization for further examples where the function is applied to\nTwinModel results."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.evaluate_twin_prop_status.html#evaluate_twin_prop_status","title":"evaluate_twin_prop_status","text":"evaluate_twin_prop_status\n\n\n\nstatic TwinRuntime.evaluate_twin_prop_status(prop_status, twin_runtime, method_name, var)\n\nReturns the appropriate error message depending on prop_status when\nexecuting the function method_name with the variable var.\n\nParameters\n\nprop_status\n\npython:int\n\nStatus of the variable for which its properties are\nbeing evaluated.\n\ntwin_runtime\n\nTwinRuntime\n\nTwinRuntime instance associated to the TWIN model.\n\nmethod_name\n\npython:str\n\nMethod executed when the TWIN’s status is evaluated.\n\nvar\n\npython:str\n\nTWIN model’s variable name."},{"objectID":"Home","href":"examples/01-twin_examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n01:19.439 total execution time for 4 files from examples01-twin_examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_01-twin_examples_01-electricRange.py (01-electricRange.py)\n\n01:05.246\n\n0.0\n\nsphx_glr_examples_01-twin_examples_00-coupledClutches.py (00-coupledClutches.py)\n\n00:06.540\n\n0.0\n\nsphx_glr_examples_01-twin_examples_03-scalarDROM.py (03-scalarDROM.py)\n\n00:04.964\n\n0.0\n\nsphx_glr_examples_01-twin_examples_02-heatExchangerRS.py (02-heatExchangerRS.py)\n\n00:02.690\n\n0.0"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_api_version.html#twin_get_api_version","title":"twin_get_api_version","text":"twin_get_api_version\n\n\n\nstatic TwinRuntime.twin_get_api_version()\n\nReturns the version of the Twin Runtime SDK being used."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_nominal.html#twin_get_var_nominal","title":"twin_get_var_nominal","text":"twin_get_var_nominal\n\n\n\nTwinRuntime.twin_get_var_nominal(var_name)\n\nRetrieves the nominal value of a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:float\n\nNominal value of the given variable."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_number_outputs.html#twin_get_number_outputs","title":"twin_get_number_outputs","text":"twin_get_number_outputs\n\n\n\nTwinRuntime.twin_get_number_outputs()\n\nRetrieves the number of outputs of the TWIN model.\n\nReturns\n\npython:int\n\nNumber of outputs of the TWIN model"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes the core Pythonic interfaces for twin runtimes.\nHere, you can find all APIs for consuming twin runtimes, from the lowest-level APIs\nwith the pytwin.TwinRuntime class to the higher-level\nAPIs with the pytwin.TwinModel class."},{"objectID":"Home","href":"api/index.html#twin-runtimes","title":"API reference > Twin runtimes","text":"Twin runtimes\n\nThe TwinRuntime class provides access to all\nthe twin runtime functionalities. It is the lowest-level API of the twin runtime SDK.\nFor a workflow example, see ref_index_api_sdk."},{"objectID":"Home","href":"api/index.html#evaluate","title":"API reference > Evaluate","text":"Evaluate\n\nThe TwinModel class implements a higher-level\nabstraction to facilitate the manipulation and execution of a twin model. For more\ninformation, see ref_index_api_evaluate."},{"objectID":"Home","href":"api/index.html#global-settings","title":"API reference > Global settings","text":"Global settings\n\nPyTwin provides global settings for configuring and changing both logging and directory options.\nFor more information, see ref_index_api_logging."},{"objectID":"Home","href":"api/index.html#post-processing","title":"API reference > Post-processing","text":"Post-processing\n\nThe post-processing module contains physics-specific functions for post-processing twin model results,\nsee ref_index_postprocessing."},{"objectID":"Home","href":"api/index.html#other-functions","title":"API reference > Other functions","text":"Other functions\n\nSome other PyTwin functions are available and used in examples. For more information,\nsee ref_index_api_example.\n\n\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_field_output_name.html#get_field_output_name","title":"get_field_output_name","text":"get_field_output_name\n\n\n\nTwinModel.get_field_output_name(rom_name)\n\nGet the output field name associated to the TBROM named rom_name.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.get_field_output_name(model.tbrom_names[0])"},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#3d-field-rom-example-for-input-field-snapshot-projection-and-snapshot-generation-on-demand","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand","text":"3D field ROM example for input field snapshot projection and snapshot generation on demand\n\nThis example shows how to use PyTwin to load and evaluate a twin model that has a\nfield ROM with inputs parameterized by both scalar and field data. The example also\nshows how to evaluate the output field data in the form of snapshots.\n\nThe example model is a valve that takes fluid pressure magnitude as a scalar input and wall\ntemperature as vector input and gives deformation, in meters, as an output.\n\nResults are available on the full model, or can be exported on two subgroups:\n\nGroup_1: Bolts\n\nGroup_2: Body\n\nTo be able to use the functionalities to project an input field snapshot, you must have a\ntwin with one or more TBROMs parameterized by input field data. Input mode coefficients\nfor TBROMs are connected to the twin’s inputs following these conventions:\n\nIf there are multiple TBROMs in the twin, the format for the name of the twin input must be\n{input_field_name}_mode_{mode_index}_{tbrom_name}.\n\nIf there is a single TBROM in the twin, the format for the name of the twin input must be\n{input_field_name}_mode_{mode_index}.\n\nTo be able to use the functionalities to generate an output field snapshot on demand, you\nmust have a twin with one or more TBROMs. The output mode coefficients for the TBROMs\nmust be enabled when exporting the TBROMs and connected to twin outputs following\nthese conventions:\n\nIf there are multiple TBROMs in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}_{tbrom_name}.\n\nIf there is a single TBROM in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}.\n\nTo be able to use the functionalities to generate points file on demand, you need to have a Twin with 1 or\nmore TBROM, for which its geometry is embedded when exporting the TBROMs to Twin Builder\n\nTo be able to use the functionalities to generate points or snapshot on a named selection, you\nneed to have a Twin with 1 or more TBROM, for which Named Selections are defined."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#perform-required-imports","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input files."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#define-auxiliary-functions","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary functions for comparing and plotting the results from\ndifferent input values evaluated on the twin model and for computing\nthe norm of the output field."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#define-rom-scalar-inputs","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Define ROM scalar inputs","text":"Define ROM scalar inputs\n\nDefine the ROM scalar inputs."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#load-the-twin-runtime-and-generate-displacement-results","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Load the twin runtime and generate displacement results","text":"Load the twin runtime and generate displacement results\n\nLoad the twin runtime and generate displacement results from the TBROM."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#evaluate-the-twin-with-different-input-values-and-collect-corresponding-outputs","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Evaluate the twin with different input values and collect corresponding outputs","text":"Evaluate the twin with different input values and collect corresponding outputs\n\nBecause the twin is based on a static model, two options can be considered:\n\nSet the initial input value to evaluate and run the initialization function (current approach).\n\nCreate an input dataframe considering all input values to evaluate and run the batch function\nto evaluate. In this case, to execute the transient simulation, a time dimension must be\narbitrarily defined."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#simulate-the-twin-in-batch-mode","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Simulate the twin in batch mode","text":"Simulate the twin in batch mode\n\nReset/re-initialize the twin and run the simulation in batch mode, which\npasses all the input data, simulates all the data points, and collects all\nthe outputs at once. The snapshots are then generated in a post-processing\nstep."},{"objectID":"Home","href":"examples/02-tbrom_examples/02-TBROM_input_field.html#plot-results","title":"3D field ROM example for input field snapshot projection and snapshot generation on demand > Plot results","text":"Plot results\n\nPlot the results.\n\n\n\nTotal running time of the script: (0 minutes 5.002 seconds)\n\n\n\nDownload Jupyter notebook: 02-TBROM_input_field.ipynb\n\nDownload Python source code: 02-TBROM_input_field.py\n\nDownload zipped: 02-TBROM_input_field.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_param_by_name.html#twin_set_param_by_name","title":"twin_set_param_by_name","text":"twin_set_param_by_name\n\n\n\nTwinRuntime.twin_set_param_by_name(param_name, value)\n\nSet the current value of a single TWIN parameter specified by name.\n\nParameters\n\nparam_name\n\npython:str\n\nParameter name.\n\nvalue\n\npython:float\n\nParameter value."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.is_fmu_supported.html#is_fmu_supported","title":"is_fmu_supported","text":"is_fmu_supported\n\n\n\nstatic TwinRuntime.is_fmu_supported(file_path)\n\nReturns whether the given FMI-based model is supported by the Twin SDK.\n\nTwin SDK currently only supports FMI 2.0 models\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the model or model description XML file.\n\nReturns\n\nTuple[bool, python:str]\n\nTrue if the FMU model is supported\nFalse with a message if the FMU model is not supported\n\nReturn type\n\nTuple[bool, str]"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_initialize.html#twin_initialize","title":"twin_initialize","text":"twin_initialize\n\n\n\nTwinRuntime.twin_initialize()\n\nInitializes the TWIN model. Must be called after twin_instantiate()."},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogLevel.PYTWIN_LOG_CRITICAL.html#pytwin_log_critical","title":"PYTWIN_LOG_CRITICAL","text":"PYTWIN_LOG_CRITICAL\n\n\n\nPyTwinLogLevel.PYTWIN_LOG_CRITICAL = 50\n\n"},{"objectID":"Home","href":"api/examples/_autosummary/pytwin.read_binary.html#read_binary","title":"read_binary","text":"read_binary\n\n\n\npytwin.read_binary(filepath)\n\nRead a binary snapshot file from the disk.\n\nParameters\n\nfilepath\n\npython:str\n\nPath of the binary file to be read.\n\nReturns\n\nnp.ndarray\n\nReturn a 1D flatenned Numpy array of snapshot data read.\n\nExamples\n\n>>> from pytwin import read_binary\n>>> snapshot_data = read_binary('snapshot.bin')"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_load.html#twin_load","title":"twin_load","text":"twin_load\n\n\n\nTwinRuntime.twin_load(log_level, fmi_type=FmiType.UNDEFINED)\n\nOpens and loads a TWIN model, with a given log level for the log file.\nClient code can also specify the FMI type of the model. If the loaded\nmodel does not support the specified FMI type, an error is raised.\n\nParameters\n\nlog_level\n\nLogLevel\n\nLog level selected for the log file\n(LogLevel.TWIN_LOG_ALL, LogLevel.TWIN_LOG_WARNING,\nLogLevel.TWIN_LOG_ERROR, LogLevel.TWIN_LOG_FATAL,\nLogLevel.TWIN_NO_LOG).\n\nfmi_type\n\nFmiType\n\nFMI type of the model (FmiType.CS, FmiType.ME, FmiType.UNDEFINED)."},{"objectID":"Home","href":"index.html#pytwin-documentation-011dev0","title":"PyTwin documentation 0.11.dev0","text":"PyTwin documentation 0.11.dev0\n\n"},{"objectID":"Home","href":"index.html#introduction","title":"PyTwin documentation 0.11.dev0 > Introduction","text":"Introduction\n\nAn analytics-driven, simulation-based digital twin is a connected, virtual replica of an\nin-service physical asset in the form of an integrated multi-domain system simulation that\nmirrors the life and experience of the asset. Ansys Digital Twins enable system design and\noptimization as well as predictive maintenance, to optimize industrial asset management.\nBy implementing Ansys Digital Twins, you can improve top-line revenue, manage bottom-line\ncosts, and both gain and retain competitive advantages.\n\nAnsys Twin Builder and Ansys TwinAI are open solutions that allow engineers to create\ndigital twins and export them in the form of deployable twin runtimes."},{"objectID":"Home","href":"index.html#what-is-pytwin","title":"PyTwin documentation 0.11.dev0 > What is PyTwin?","text":"What is PyTwin?\n\nPyTwin is part of the PyAnsys ecosystem that\nlets you deploy twin runtimes within a Python environment of your choice in\nconjunction with other PyAnsys libraries and external Python libraries.\n\nPyTwin implements different modules to facilitate the consumption of twin runtimes.\nIt gives access to core runtime functionalities as well as a higher-level abstraction\nclass offering Python interfaces that can be used in any client code for workflow development\nand twin runtime integrations. Using PyTwin, you can programmatically interact with and\ncontrol the execution of twin runtimes."},{"objectID":"Home","href":"index.html#features","title":"PyTwin documentation 0.11.dev0 > Features","text":"Features\n\nSome of the many features in the PyTwin package, pytwin, allow you to:\n\nUse twin runtime functionalities to build your own consumption workflows based on\natomic API calls. For more information, see ref_index_api_sdk.\n\nAccess and use the higher-level abstraction implementation of consumption workflows to\ndirectly use and integrate twin runtimes. For more information, see\nref_index_api_evaluate.\n\nBecome familiar with PyTwin functionalities by exploring the multiple examples that are available.\nFor more information, see ref_example_gallery."},{"objectID":"Home","href":"index.html#documentation-and-issues","title":"PyTwin documentation 0.11.dev0 > Documentation and issues","text":"Documentation and issues\n\nIn addition to getting_started and ref_user_guide sections, the PyTwin\ndocumentation provides ref_index_api, ref_example_gallery,\nand ref_contributing sections.\n\nOn the PyTwin Issues page, you can create\nissues to submit questions, report bugs, and request new features. To reach\nthe PyAnsys support team, email pyansys.support@ansys.com."},{"objectID":"Home","href":"index.html#license","title":"PyTwin documentation 0.11.dev0 > License","text":"License\n\nPyTwin is licensed under the MIT license.\n\nPyTwin makes no commercial claim over Ansys whatsoever. This library\nextends the functionality of Ansys Twin Builder and Ansys TwinAI by adding\na Pythonic interface to twin runtimes without changing the\ncore behavior or license of the original software. The interactive\ncontrol of twin runtimes through PyTwin may require a license of\nAnsys TwinAI depending on the case, see getting_started section for more information.\n\nFor more information on both Ansys Twin Builder and Ansys TwinAI, see\nAnsys Digital Twin\non the Ansys website."},{"objectID":"Home","href":"index.html#project-index","title":"PyTwin documentation 0.11.dev0 > Project index","text":"Project index\n\ngenindex"},{"objectID":"Home","href":"api/examples/_autosummary/pytwin.load_data.html#load_data","title":"load_data","text":"load_data\n\n\n\npytwin.load_data(inputs)\n\nLoad the input data from a CVS file into a Pandas dataframe.\n\nParameters\n\ninputs\n\npython:str\n\nPath of the CSV file. This file must contain the Time column and all input data\nfor the twin model.\n\nReturns\n\ninputs_df: pandas.DataFrame\n\nA Pandas dataframe storing time values and all corresponding input data.\n\nExamples\n\n>>> from pytwin import load_data, download_file\n>>> csv_input = download_file(\"CoupledClutches_input.csv\", \"twin_input_files\")\n>>> twin_model_input_df = load_data(csv_input)"},{"objectID":"Home","href":"api/logging/index.html#global-settings","title":"Global settings","text":"Global settings\n\nPyTwin provides global settings for configuring and changing both logging and directory options.\n\n"},{"objectID":"Home","href":"api/logging/index.html#workflow-example","title":"Global settings > Workflow example","text":"Workflow example\n\nFor a workflow example, see ref_user_guide."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_simulate_batch_mode.html#twin_simulate_batch_mode","title":"twin_simulate_batch_mode","text":"twin_simulate_batch_mode\n\n\n\nTwinRuntime.twin_simulate_batch_mode(input_df, output_column_names, step_size=0, interpolate=0, time_as_index=False)\n\nSimulates the TWIN model in batch mode using given input dataframe and\nreturns the results in an output dataframe using output column names.\n\nParameters\n\ninput_df\n\npandas.DataFrame\n\nPandas dataframe storing all the TWIN inputs to be evaluated of\nthe batch simulation.\n\noutput_column_names\n\npython:list\n\nList of string describing the different output columns name\n(including ‘Time’ as first column).\n\nstep_size\n\npython:float (optional)\n\nStep size. If 0, time points in the input table will be used as\nthe output points; otherwise it will produce\noutput at an equal spacing of h. Default is 0.\n\ninterpolate\n\npython:int (optional)\n\nFlag to interpolate real continuous variables if step size > 0.\n\ntime_as_index\n\nbool (optional)\n\nFlag to reset the input_df index if set to True. Default is False.\n\nReturns\n\npandas.DataFrame\n\nPandas dataframe storing all the TWIN outputs evaluated over\nthe batch simulation."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_named_selections.html#get_named_selections","title":"get_named_selections","text":"get_named_selections\n\n\n\nTwinModel.get_named_selections(rom_name)\n\nGet the list of named selections associated to the TBROM named rom_name.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the TBROM. To get a list of available TBROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.get_named_selections(model.tbrom_names[0])"},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nEnd-to-end examples show how you can use PyTwin. If the pytwin package is installed on your machine,\nyou can download these examples as Python files or Jupyter notebooks and run them locally."},{"objectID":"Home","href":"examples/index.html#twin-creation-examples","title":"Examples > Twin creation examples","text":"Twin creation examples\n\nThese examples show how to use additional functionalities to create TWIN file (for example using PyAEDT).\n\nsphx_glr_examples_00-twin_creation_00-TBROM_Twin_creation_evaluation.py"},{"objectID":"Home","href":"examples/index.html#twin-evaluation-examples","title":"Examples > Twin evaluation examples","text":"Twin evaluation examples\n\nThese examples show how to use the evaluation workflow in a TWIN file.\nIncluded are multiple workflow demonstrations such as single evaluation of a dynamic model, parametric sweep analysis\n(static/dynamic models), evaluation with states saving and loading.\n\nsphx_glr_examples_01-twin_examples_00-coupledClutches.py\n\nsphx_glr_examples_01-twin_examples_01-electricRange.py\n\nsphx_glr_examples_01-twin_examples_02-heatExchangerRS.py\n\nsphx_glr_examples_01-twin_examples_03-scalarDROM.py"},{"objectID":"Home","href":"examples/index.html#tbrom-evaluation-examples","title":"Examples > TBROM evaluation examples","text":"TBROM evaluation examples\n\nThese examples show how to use PyTwin to evaluate field results from TBROM included in a TWIN file.\nMultiple workflows are demonstrated such as image and field data generation (with possible processing of data to other\nAnsys tools like Fluent or Mechanical), TBROM evaluation with input field parameterization, output field visualization\nfor detailed post processing (including projection on CFD/FEA meshes).\n\nsphx_glr_examples_02-tbrom_examples_00-TBROM_images.py\n\nsphx_glr_examples_02-tbrom_examples_01-TBROM_dataTransfer_pyMAPDL.py\n\nsphx_glr_examples_02-tbrom_examples_02-TBROM_input_field.py\n\nsphx_glr_examples_02-tbrom_examples_03-TBROM_input_numpy_field.py\n\nsphx_glr_examples_02-tbrom_examples_04-TBROM_CFD_mesh_based_visualization.py\n\nsphx_glr_examples_02-tbrom_examples_05-TBROM_FEA_mesh_based_visualization.py\n\nsphx_glr_examples_02-tbrom_examples_06-TBROM_FEA_static_structural_optimization.py\n\nsphx_glr_examples_02-tbrom_examples_07-TBROM_parametric_field_history.py\n\n\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_var_start.html#twin_get_var_start","title":"twin_get_var_start","text":"twin_get_var_start\n\n\n\nTwinRuntime.twin_get_var_start(var_name)\n\nRetrieves the start value of a given variable by name.\n\nParameters\n\nvar_name: str\n\nName of the variable.\n\nReturns\n\npython:float\n\nStart value of the given variable."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.generate_snapshot_batch.html#generate_snapshot_batch","title":"generate_snapshot_batch","text":"generate_snapshot_batch\n\n\n\nTwinModel.generate_snapshot_batch(batch_results, rom_name, on_disk=True, named_selection=None)\n\nGenerate several field snapshots based on historical batch results of the Twin, either in memory or on disk, for\nthe full field or a specific named selection. It returns a list of the field data as an array if in memory, or a\nlist of the paths of the different snapshots written on disk.\n\nParameters\n\nbatch_results\n\npandas.DataFrame\n\nHistorical output values stored in a Pandas dataframe. It must have a ‘Time’ column and all the time\ninstants for the twin model outputs that you want to post process, with one output per column.\n\nrom_name\n\npython:str\n\nName of the TBROM considered to generate the snapshot.\n\non_disk\n\nbool\n\nWhether the snapshot file is saved on disk (True which is the default) or returned in memory (False).\n\nnamed_selection\n\npython:str (optional)\n\nNamed selection on which the snasphot has to be generated.\n\nReturns\n\npython:list[python:str] | python:list[np.ndarray]\n\nList of paths to snapshots written to disk if on_disk == True, else list of arrays of snapshot field data\n\nRaises\n\nTwinModelError:\n\nIf the pytwin.TwinModel.initialize_evaluation() method has not been called before.\nIf rom_name is not included in the Twin’s list of TBROM\nIf TBROM hasn’t its mode coefficients outputs connected to the twin’s outputs.\nIf name_selection is not included in the TBROM’s list of Named Selections\n\nExamples\n\n>>> import pandas as pd\n>>> from pytwin import TwinModel\n>>> # Instantiate a twin model, initialize it, and evaluate it step by step until you want to save its state\n>>> model = TwinModel('model.twin')\n>>> inputs_df = pd.DataFrame({'Time': [0., 1., 2.], 'input1': [1., 2., 3.], 'input2': [1., 2., 3.]})\n>>> model.initialize_evaluation(inputs={'input1': 1., 'input2': 1.})\n>>> romname = model.tbrom_names[0]\n>>> nslist = model.get_named_selections(romname)\n>>> outputs_df = model.evaluate_batch(inputs_df=inputs_df)\n>>> fieldresults = model.generate_snapshot_batch(outputs_df, romname, nslist[0])"},{"objectID":"Home","href":"examples/01-twin_examples/index.html#twin-evaluation-examples","title":"Twin evaluation examples","text":"Twin evaluation examples\n\nThese examples show how to use the evaluation workflow in a TWIN file.\nIncluded are multiple workflow demonstrations such as single evaluation of a dynamic model, parametric sweep analysis\n(static/dynamic models), evaluation with states saving and loading.\n\nsphx_glr_examples_01-twin_examples_00-coupledClutches.py\n\nsphx_glr_examples_01-twin_examples_01-electricRange.py\n\nsphx_glr_examples_01-twin_examples_02-heatExchangerRS.py\n\nsphx_glr_examples_01-twin_examples_03-scalarDROM.py\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_number_of_deployments.html#twin_number_of_deployments","title":"twin_number_of_deployments","text":"twin_number_of_deployments\n\n\n\nstatic TwinRuntime.twin_number_of_deployments(file_path)\n\nReturns the expected number of deployments for the given TWIN model\nas defined at the export time.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the TWIN model.\n\nReturns\n\npython:int\n\nNumber of expected deployments for the TWIN model."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.load_twin_default_sim_settings.html#load_twin_default_sim_settings","title":"load_twin_default_sim_settings","text":"load_twin_default_sim_settings\n\n\n\nTwinRuntime.load_twin_default_sim_settings()\n\nSet the default simulation settings (end time, step size, tolerance)\nstored within the model."},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogLevel.PYTWIN_LOG_ERROR.html#pytwin_log_error","title":"PYTWIN_LOG_ERROR","text":"PYTWIN_LOG_ERROR\n\n\n\nPyTwinLogLevel.PYTWIN_LOG_ERROR = 40\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.generate_points.html#generate_points","title":"generate_points","text":"generate_points\n\n\n\nTwinModel.generate_points(rom_name, on_disk=True, named_selection=None)\n\nGenerate a points file either in memory or on disk, for the full domain or a specific part. It returns the\npoints data as an array if in memory, or the path of the points file written on disk.\n\nParameters\n\nrom_name: str\n\nName of the TBROM considered to generate the point file.\n\non_disk: bool\n\nWhether the point file is saved on disk (True) or returned in memory (False).\n\nnamed_selection: str (optional)\n\nNamed selection on which the point file has to be generated.\n\nReturns\n\npython:str | np.ndarray\n\nPath to points file written to disk if on_disk == True, else array of points data\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object has not been initialized.\nIf rom_name is not included in the Twin’s list of TBROM\nIf the TBROM does not have any point file available\nIf name_selection is not included in the TBROM’s list of Named Selections\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> # Instantiate a twin model, initialize it, and evaluate it step by step until you want to save its state\n>>> model1 = TwinModel('model.twin')\n>>> model1.initialize_evaluation()\n>>> romname = model1.tbrom_names[0]\n>>> nslist = model1.get_named_selections(romname)\n>>> points = model1.generate_points(romname, False, nslist[0])"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.close.html#close","title":"close","text":"close\n\n\n\nTwinModel.close()\n\nCleanup object when user asks to close it."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.print_model_info.html#print_model_info","title":"print_model_info","text":"print_model_info\n\n\n\nTwinModel.print_model_info(max_var_to_print=inf)\n\nPrint all the model information including Twin Runtime version, model name, number of outputs, inputs,\nparameters, default simulation settings, output names, input names and parameter names. If TBROMs are present,\nit will also print associated information.\n\nThis method must be called after a TwinModel has been instantiated.\n\nif field inputs are supplied for a TBROM, they will override any input mode coefficient inputs for\nthat ROM that are included in inputs.\n\nParameters\n\nmax_var_to_print\n\npython:int, optional\n\nMaximum number of variables for which the properties need to be evaluated, default value is numpy.inf.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>>\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.print_model_info()"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_simulate.html#twin_simulate","title":"twin_simulate","text":"twin_simulate\n\n\n\nTwinRuntime.twin_simulate(time_stop, time_step=0)\n\nSimulates the TWIN model from previous time point to the\nstop point given by time_stop.\n\nParameters\n\ntime_stop\n\npython:float\n\nStop time.\n\ntime_step\n\npython:float (optional)\n\nStep size. If the value is 0, only one stepping call will be\nperformed such that the model will be stepped from previous stop\npoint to the given point in one shot (internally the model can\ntake smaller time steps for numerical integration); otherwise,\nit will perform multiple steps with the step size of h.\nDefault is 0."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.print_var_info.html#print_var_info","title":"print_var_info","text":"print_var_info\n\n\n\nTwinRuntime.print_var_info(var_names, max_var_to_print)\n\nPrint all the properties (name, unit, quantity type, start value,\nminimum value, maximum values, description) of the given variables,\nwith a maximum number of variables to consider.\n\nParameters\n\nvar_names\n\npython:list\n\nList of variables names for which the variable properties need to\nbe evaluated.\n\nmax_var_to_print\n\npython:int (optional)\n\nMaximum number of variables for which the properties need to be\nevaluated, default value is numpy.inf."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_geometry_filepath.html#get_geometry_filepath","title":"get_geometry_filepath","text":"get_geometry_filepath\n\n\n\nTwinModel.get_geometry_filepath(rom_name)\n\nGet the geometry file associated with a ROM available in the twin model.\n\nThe geometry file contains the coordinates of the points that are used to define the\ngeometrical support of the ROM field output.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel obbject does not include any TBROMs.\nIf the given ROM name is not available.\nIf the given geometry file cannot be found for the ROM.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> available_rom_names = model.tbrom_names\n>>> geometry_filepath = TwinModel.get_geometry_filepath(rom_name=available_rom_names[0])"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.id.html#id","title":"id","text":"id\n\n\n\nproperty TwinModel.id\n\nModel unique ID."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_save_state.html#twin_save_state","title":"twin_save_state","text":"twin_save_state\n\n\n\nTwinRuntime.twin_save_state(save_to)\n\nSave the TWIN states (including model parameters) in the file\nindicated by the ‘save_to’ argument.\n\nParameters\n\nsave_to\n\npython:str\n\nPath of the file used to save the TWIN states."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.get_model_fmi_type.html#get_model_fmi_type","title":"get_model_fmi_type","text":"get_model_fmi_type\n\n\n\nstatic TwinRuntime.get_model_fmi_type(file_path)\n\nSearches the description file of the source model to discover if it\ncontains Model Exchange and/or CoSimulation types of model.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path to the source model file (it could be a .twin, .fmu,\nor modelDescription.xml).\n\nReturns\n\nSet[python:str]\n\n‘me’ (Model Exchange) or ‘cs’ (Co Simulation) model or both.\n\nReturn type\n\nSet[str]"},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogOption.PYTWIN_LOGGING_OPT_FILE.html#pytwin_logging_opt_file","title":"PYTWIN_LOGGING_OPT_FILE","text":"PYTWIN_LOGGING_OPT_FILE\n\n\n\nPyTwinLogOption.PYTWIN_LOGGING_OPT_FILE = 0\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.TBROM_SNAPSHOT_FILE_PREFIX.html#tbrom_snapshot_file_prefix","title":"TBROM_SNAPSHOT_FILE_PREFIX","text":"TBROM_SNAPSHOT_FILE_PREFIX\n\n\n\nTwinModel.TBROM_SNAPSHOT_FILE_PREFIX = 'snapshot_'\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_field_input_names.html#get_field_input_names","title":"get_field_input_names","text":"get_field_input_names\n\n\n\nTwinModel.get_field_input_names(rom_name)\n\nGet the list of input fields names associated to the TBROM named rom_name.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.get_field_input_names(model.tbrom_names[0])"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.save_state.html#save_state","title":"save_state","text":"save_state\n\n\n\nTwinModel.save_state()\n\nSave the state of the twin model after its initialization and after step-by-step evaluation.\n\nThis method should be used in conjunction with the pytwin.TwinModel.load_state() method.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> # Instantiate a twin model, initialize it, and evaluate it step by step until you want to save its state\n>>> model1 = TwinModel('model.twin')\n>>> model1.initialize_evaluation()\n>>> model1.evaluate_step_by_step(step_size=0.1)\n>>> model1.save_state()\n>>> # Instantiate a new twin model with the same TWIN file and load the saved state\n>>> model2 = TwinModel('model.twin')\n>>> model2.load_state(model_id=model1.id, evaluation_time=model1.evaluation_time)\n>>> model2.evaluate_step_by_step(step_size=0.1)"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.solver_parameters.html#solver_parameters","title":"solver_parameters","text":"solver_parameters\n\n\n\nproperty TwinModel.solver_parameters\n\nDictionary with solver parameter values at the current evaluation time. These include : solver.method (\nsolver integration method - ADAMS=1 and BDF=2 - default is 1), solver.abstol (solver absolute tolerance, default\nis 1e-12), and solver.reltol (solver relative tolerance, default is 0.0001)."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_tbrom_output_field.html#get_tbrom_output_field","title":"get_tbrom_output_field","text":"get_tbrom_output_field\n\n\n\nTwinModel.get_tbrom_output_field(rom_name)\n\nReturn the TBROM output field as a PyVista DataSet object, in the form of point cloud data. The resulting field\nis based on current states of the TwinModel and is automatically updated whenever the TwinModel is evaluated.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nReturns\n\npyvista.DataSet\n\nPyVista DataSet object of the TBROM output field in the form of point cloud data.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\nIf the TBROM does not have any point file available.\nIf TBROM hasn’t its mode coefficients outputs connected to the twin’s outputs.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> romname = model.tbrom_names[0]\n>>> rom_results = model.get_tbrom_output_field(romname)\n>>> model.initialize_evaluation()"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.instantiation_time.html#instantiation_time","title":"instantiation_time","text":"instantiation_time\n\n\n\nproperty TwinModel.instantiation_time\n\nFloating point number that is the time at which the twin model has been instantiated.\nThe value is given in seconds since the epoch."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.outputs.html#outputs","title":"outputs","text":"outputs\n\n\n\nproperty TwinModel.outputs\n\nDictionary with output values at the current evaluation time."},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogLevel.html#pytwinloglevel","title":"PyTwinLogLevel","text":"PyTwinLogLevel\n\n\n\nclass pytwin.PyTwinLogLevel(*values)\n\nProvides an enum for choosing the logging level for use by all PyTwin objects.\nPyTwin logging levels follow standard Python logging levels.\n\nPYTWIN_LOG_DEBUG:\n\nProvide detailed information that is typically of interest only when diagnosing problems.\n\nPYTWIN_LOG_INFO:\n\nProvide confirmation that things are working as expected.\n\nPYTWIN_LOG_WARNING:\n\nProvide an indication that something unexpected has happened or a problem might occur\nin the near future. For example, disk space low is a warning that is shown when\nthe software is still working as expected but a problem might soon be encountered.\n\nPYTWIN_LOG_ERROR:\n\nProvide notice that due to a more serious problem, the software has not been able\nto perform some function.\n\nPYTWIN_LOG_CRITICAL:\n\nProvide notice of a serious error, indicating that the software may be unable to\ncontinue running.\n\nAttributes\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.evaluation_is_initialized.html#evaluation_is_initialized","title":"evaluation_is_initialized","text":"evaluation_is_initialized\n\n\n\nproperty TwinModel.evaluation_is_initialized\n\nIndicator for if the evaluation has been initialized."},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogOption.PYTWIN_LOGGING_OPT_NOLOGGING.html#pytwin_logging_opt_nologging","title":"PYTWIN_LOGGING_OPT_NOLOGGING","text":"PYTWIN_LOGGING_OPT_NOLOGGING\n\n\n\nPyTwinLogOption.PYTWIN_LOGGING_OPT_NOLOGGING = 2\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.initialize_evaluation.html#initialize_evaluation","title":"initialize_evaluation","text":"initialize_evaluation\n\n\n\nTwinModel.initialize_evaluation(parameters=None, inputs=None, field_inputs=None, json_config_filepath=None)\n\nInitialize evaluation of a twin model.\n\nA twin model can be initialized with either a dictionary of parameters values and/or input (start) values\nor a JSON configuration file. For more information, see the examples.\n\nUsing a JSON configuration file overrides using a dictionary of parameter values and/or input (start) values.\n\nIf no inputs are given in the arguments or in the configuration file, calling this method\nresets inputs to their default values. The behavior is the same for parameters.\n\nDefault values are kept for parameters and inputs that are not found in the provided dictionaries\nor configuration file. For example, the start value of the twin model is kept.\n\nAfter this method is called and the initialization time is updated, the evaluation time is reset to zero.\n\nThis method must be called:\n\nBefore evaluating the twin model.\n\nIf you want to update parameters values between multiple twin evaluations. In this case,\nthe twin model is reset.\n\nif field inputs are supplied for a TBROM, they will override any input mode coefficient inputs for\nthat ROM that are included in inputs.\n\nParameters\n\nparameters\n\npython:dict, optional\n\nDictionary of parameter values ({“name”: value}) to use for the next evaluation.\n\ninputs\n\npython:dict, optional\n\nDictionary of input values ({“name”: value}) to use for twin model initialization.\n\nfield_inputs\n\npython:dict, optional\n\nDictionary of input fields snapshots ({“tbromname”: {“inputfieldname”: snapshotpath}}) to use for twin model\ninitialization.\n\njson_config_filepath\n\npython:str, optional\n\nFilepath to a JSON configuration file to use to initialize the evaluation.\n\nExamples\n\n>>> import json\n>>> from pytwin import TwinModel\n>>>\n>>> # Example 1 - Using a config file and scalar inputs\n>>> config = {\"version\": \"0.1.0\", \"model\": {\"inputs\": {\"input-name-1\": 1., \"input-name-2\": 2.},         >>> \"parameters\": {\"param-name-1\": 1.,\"param-name-2\": 2.}}}\n>>> with open('path_to_your_config.json', 'w') as f:\n>>>     f.write(json.dumps(config))\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.initialize_evaluation(json_config_filepath='path_to_your_config.json')\n>>> outputs = twin_model.outputs\n>>>\n>>> # Example 2 - Using a dictionary and field inputs from disk\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.initialize_evaluation()\n>>> romname = twin_model.tbrom_names[0]\n>>> fieldname = twin_model.get_field_input_names(romname)[0]\n>>> twin_model.initialize_evaluation(field_inputs={romname: {fieldname:'path_to_the_snapshot.bin'}})\n>>> results = {'Time': twin_model.evaluation_time, 'Outputs': twin_model.outputs}\n>>>\n>>> # Example 3 - Using a dictionary and field inputs from memory\n>>> twin_model = TwinModel(model_filepath='path_to_your_twin_model.twin')\n>>> twin_model.initialize_evaluation()\n>>> romname = twin_model.tbrom_names[0]\n>>> fieldname = twin_model.get_field_input_names(romname)[0]\n>>> snapshot = np.array([3.14, 2.71, 9.81, 6.02])\n>>> twin_model.initialize_evaluation(field_inputs={romname: {fieldname:snapshot}})\n>>> results = {'Time': twin_model.evaluation_time, 'Outputs': twin_model.outputs}"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.project_tbrom_on_mesh.html#project_tbrom_on_mesh","title":"project_tbrom_on_mesh","text":"project_tbrom_on_mesh\n\n\n\nTwinModel.project_tbrom_on_mesh(rom_name, target_mesh, interpolate, named_selection=None, nodal_values=False, sharpness=5.0, radius=0.0001, strategy='closest_point', null_value=0.0, n_points=None, all_points=False)\n\nProject the field ROM data onto a targeted mesh, using the current states of the TwinModel. The returned PyVista\nDataSet object is automatically updated whenever the TwinModel is evaluated.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the TBROM considered to project the results.\n\ntarget_mesh: pyvista.DataSet\n\nPyVista DataSet object of the targeted mesh.\n\ninterpolate: bool\n\nFlag to indicate whether the point cloud data are interpolated (True) or not (False) on the targeted mesh.\nInterpolation is recommended when point cloud data and mesh data are not ordered in the same way, and when\nthe target mesh is different from the one used to generate the ROM. Interpolation is automatically enforced\nif the target mesh size (i.e. number of cells/points) is different from the point cloud size.\n\nnodal_values: bool (optional)\n\nControl whether the interpolated results are returned as nodal values, or cell values (default)\n\nnamed_selection: str (optional)\n\nNamed selection from the ROM (i.e. subset of points cloud) that will be projected on the targeted mesh. The\ndefault is None, in which case the entire domain is considered.\n\nsharpness\n\npython:float, default: 5.0\n\nSet the sharpness (i.e., falloff) of the Gaussian interpolation kernel. As the sharpness increases the\neffects of distant points are reduced.\n\nradius\n\npython:float, default: 0.0001\n\nSpecify the radius within which the interpolation basis points must lie.\n\nstrategy\n\npython:str, default: “closest_point”\n\nSpecify a strategy to use when encountering a “null” point during the interpolation process. Null points\noccur when the local neighborhood (of nearby points to interpolate from) is empty. If the strategy is set to\n'mask_points', then only cells with some or all valid points (according to the all_points setting)\nare included in the returned PyVista DataSet. If the strategy is set to 'null_value', then the output\ndata value(s) are set to the null_value (specified in the output point data). Finally, the strategy\n'closest_point' is to simply use the closest point to perform the interpolation.\n\nnull_value\n\npython:float, default: 0.0\n\nSpecify the null point value. When a null point is encountered then all components of field ROM data\nassociated with that point are set to this value.\n\nn_points\n\npython:int, optional\n\nIf given, specifies the number of the closest points used to form the interpolation basis. This will\ninvalidate the radius argument in favor of an N closest points approach. This typically has poorer results.\n\nall_points: bool, default: False\n\nWhen strategy='mask_points', when this value is True only cells where all points are valid are kept.\nWhen False cells are kept if any of their points are valid and invalid points are given the\nnull_value.\n\nReturns\n\npyvista.DataSet\n\nPyVista DataSet object of the targeted mesh with projected field ROM data.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object has not been initialized.\nIf rom_name is not included in the Twin’s list of TBROM\nIf TBROM hasn’t its mode coefficients outputs connected to the twin’s outputs\nIf target_mesh is not a valid grid dataset\nIf name_selection is not included in the TBROM’s list of Named Selections\nIf interpolate is True and no points file is available with the TBROM\nIf strategy is 'mask_points' and all points are removed.\n\nTwinModelWarning:\n\nIf interpolate is False and the targeted mesh has a number of cells and points different from TBROM point\ncloud. In that case, interpolate is automatically switched to True.\n\npyvista.DataSetFilters.interpolate\n\nDetailed description of sharpness, radius, strategy, null_value and n_points parameters.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> import pyvista as pv\n>>> # Instantiate a twin model, initialize it, and evaluate it step by step until you want to save its state\n>>> model = TwinModel('model.twin')\n>>> romname = model.tbrom_names[0]\n>>> target_mesh = pv.read('mesh.vtk')\n>>> rom_results_on_mesh = model.project_tbrom_on_mesh(romname, target_mesh)\n>>> model.initialize_evaluation()"},{"objectID":"Home","href":"api/examples/_autosummary/pytwin.write_binary.html#write_binary","title":"write_binary","text":"write_binary\n\n\n\npytwin.write_binary(filepath, vec)\n\nWrite a binary snapshot file on the disk.\n\nParameters\n\nfilepath\n\npython:str\n\nPath of the binary file to be written.\n\nvec\n\nnp.ndarray\n\nN-dimensional Numpy array of snapshot data to be written in binary file.\n\nReturns\n\nbool\n\nReturn True if the binary file is successfully written.\n\nExamples\n\n>>> import numpy as np\n>>> from pytwin import write_binary\n>>> scalar_field = np.array([1.0, 2.0, 3.0, 5.0])\n>>> write_binary('snapshot_scalar.bin', scalar_field)\n>>> vector_field = np.array([[1.0, 1.0, 0.0], [1.0, 2.0, 3.0], [5.0, 3.0, 3.0], [5.0, 5.0, 6.0]])\n>>> write_binary('snapshot_vector.bin', vector_field)"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_get_rom_mode_coef_files.html#twin_get_rom_mode_coef_files","title":"twin_get_rom_mode_coef_files","text":"twin_get_rom_mode_coef_files\n\n\n\nTwinRuntime.twin_get_rom_mode_coef_files(model_name, time_from=-1, time_to=-1)\n\nRetrieves the model mode coefficients files from ‘time_from’ up to\n‘time_to’ for the given TBROM model name. By default, it returns the\nmode coefficients files for the current simulation step (for\nstep-by-step simulation) or for all previous steps (for batch\nmodel simulation). This method is only supported for Twin models\ncreated from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which the mode coefficient files\nneed to be retrieved.\n\ntime_from\n\npython:float (optional)\n\nTime stamp from which the mode coefficient files need\nto be retrieved.\n\ntime_to\n\npython:float (optional)\n\nTime stamp up to which the mode coefficient files need\nto be retrieved.\n\nReturns\n\npython:list\n\nList of path of all the mode coefficients files retrieved"},{"objectID":"Home","href":"api/examples/_autosummary/pytwin.read_snapshot_size.html#read_snapshot_size","title":"read_snapshot_size","text":"read_snapshot_size\n\n\n\npytwin.read_snapshot_size(filepath)\n\nReturn the number of data stored in a snapshot binary file.\n\nParameters\n\nfilepath\n\npython:str\n\nPath of the binary file to be written.\n\nReturns\n\npython:int\n\nNumber of data stored in the binary file.\n\nExamples\n\n>>> from pytwin import read_snapshot_size\n>>> number_data = read_snapshot_size('snapshot.bin')"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_rom_directory.html#get_rom_directory","title":"get_rom_directory","text":"get_rom_directory\n\n\n\nTwinModel.get_rom_directory(rom_name)\n\nGet the working directory path for a ROM in the twin model.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> model.get_rom_directory(model.tbrom_names[0])"},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#parametric-twin-evaluation-of-a-response-surface-rom","title":"Parametric twin evaluation of a response surface ROM","text":"Parametric twin evaluation of a response surface ROM\n\nThis example shows how you can use PyTwin to load and evaluate a twin model\nand simulate multiple parametric variations. The model is based on a\nresponse surface ROM created from a steady state thermal model of a heat\nexchanger. The inputs are the minimum and maximum heat flows on the inner face.\nThe outputs are the inner temperature and the temperatures from three\ntemperature probes within the solid and outer temperature. The model is tested\nagainst different input values to evaluate the corresponding temperature responses."},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#perform-required-imports","title":"Parametric twin evaluation of a response surface ROM > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input files."},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#define-inputs-and-simulation-settings","title":"Parametric twin evaluation of a response surface ROM > Define inputs and simulation settings","text":"Define inputs and simulation settings\n\nDefine the inputs and simulation settings."},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#define-auxiliary-functions","title":"Parametric twin evaluation of a response surface ROM > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary functions for comparing and plotting the results from\ndifferent input values evaluated on the twin model."},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#load-the-twin-runtime-and-instantiate-it","title":"Parametric twin evaluation of a response surface ROM > Load the twin runtime and instantiate it","text":"Load the twin runtime and instantiate it\n\nLoad the twin runtime and instantiate it."},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#evaluate-the-twin-with-different-input-values-and-collect-corresponding-outputs","title":"Parametric twin evaluation of a response surface ROM > Evaluate the twin with different input values and collect corresponding outputs","text":"Evaluate the twin with different input values and collect corresponding outputs\n\nBecause the twin is based on a static model, two options can be considered:\n\nSet the initial input value to evaluate and run the initialization function (current approach).\n\nCreate an input dataframe considering all input values to evaluate and run the batch function\nto evaluate. In this case, to execute the transient simulation, a time dimension must be\narbitrarily defined."},{"objectID":"Home","href":"examples/01-twin_examples/02-heatExchangerRS.html#plot-results","title":"Parametric twin evaluation of a response surface ROM > Plot results","text":"Plot results\n\nPlot the results and save the image on disk.\n\n\n\nTotal running time of the script: (0 minutes 2.690 seconds)\n\n\n\nDownload Jupyter notebook: 02-heatExchangerRS.ipynb\n\nDownload Python source code: 02-heatExchangerRS.py\n\nDownload zipped: 02-heatExchangerRS.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#3d-field-rom-example-with-fea-mesh-based-visualization","title":"3D field ROM example with FEA mesh based visualization","text":"3D field ROM example with FEA mesh based visualization\n\nThis example shows how PyTwin can be used to load and evaluate a twin model, and visualize\nthe ROM results on a FEA mesh.\nOnce the twin model is evaluated, PyDPF is used to read in the FEA mesh on which the ROM\nresults will be projected. PyVista is then used to perform the 3D visualization with different\noptions. For more information, see the\nPyDPF documentation and\nPyVista documentation.\n\nThis example uses PyDPF which requires a DPF server installation (version 2024 R1-pre0 or higher)\nas a first step. More information on how to download and install DPF server is available here :\nhttps://dpf.docs.pyansys.com/version/stable/getting_started/index.html#install-dpf-server\n\nTo be able to use the functionalities to project an output field on a mesh, you\nmust have a twin with one or more TBROMs. The output mode coefficients for the TBROMs\nmust be enabled when exporting the TBROMs and connected to twin outputs following\nthese conventions:\n\nIf there are multiple TBROMs in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}_{tbrom_name}.\n\nIf there is a single TBROM in the twin, the format for the name of the twin\noutput must be outField_mode_{mode_index}.\n\nTo be able to use the functionalities to project an output field on a mesh with interpolation,\nyou need to have a Twin with 1 or more TBROM, for which its geometry is embedded when\nexporting the TBROMs to Twin Builder"},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#perform-required-imports","title":"3D field ROM example with FEA mesh based visualization > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the input\nfiles."},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#define-rom-inputs","title":"3D field ROM example with FEA mesh based visualization > Define ROM inputs","text":"Define ROM inputs\n\nDefine the ROM inputs."},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#load-the-twin-runtime-and-generate-displacement-results","title":"3D field ROM example with FEA mesh based visualization > Load the twin runtime and generate displacement results","text":"Load the twin runtime and generate displacement results\n\nLoad the twin runtime, initialize and extract ROM related information."},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#extract-the-fea-mesh-information-for-projection","title":"3D field ROM example with FEA mesh based visualization > Extract the FEA mesh information for projection","text":"Extract the FEA mesh information for projection\n\nLoad the Mechanical rst file through PyDPF and extract the mesh"},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#project-the-tbrom-field-onto-the-targeted-mesh","title":"3D field ROM example with FEA mesh based visualization > Project the TBROM field onto the targeted mesh","text":"Project the TBROM field onto the targeted mesh\n\nThe projection is performed without interpolation (i.e. direct mapping of data)"},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#deform-the-target-mesh-using-the-rom-displacement","title":"3D field ROM example with FEA mesh based visualization > Deform the target mesh using the ROM displacement","text":"Deform the target mesh using the ROM displacement\n\nROM was generated from a large deformation analysis, so use a scale factor of 1"},{"objectID":"Home","href":"examples/02-tbrom_examples/05-TBROM_FEA_mesh_based_visualization.html#post-processing-and-field-visualization-using-pyvista","title":"3D field ROM example with FEA mesh based visualization > Post processing and field visualization using PyVista","text":"Post processing and field visualization using PyVista\n\nCreation of the scene and results to display\n\nTotal running time of the script: (0 minutes 3.559 seconds)\n\n\n\nDownload Jupyter notebook: 05-TBROM_FEA_mesh_based_visualization.ipynb\n\nDownload Python source code: 05-TBROM_FEA_mesh_based_visualization.py\n\nDownload zipped: 05-TBROM_FEA_mesh_based_visualization.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.build_prop_info_df.html#build_prop_info_df","title":"build_prop_info_df","text":"build_prop_info_df\n\n\n\nTwinRuntime.build_prop_info_df(var_names)\n\nEvaluate the properties (name, unit, data type, start value,\nminimum value, maximum values, description) of the given variables.\n\nParameters\n\nvar_names\n\npython:list\n\nList of variables names for which the variable properties\nneed to be evaluated.\n\nReturns\n\npython:list\n\nList of the variables properties evaluated."},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.tbrom_count.html#tbrom_count","title":"tbrom_count","text":"tbrom_count\n\n\n\nproperty TwinModel.tbrom_count\n\nReturn number of TBROM contained in the Twin. If a twin model has not been initialized, or if there is no TBROM\nin the twin model, it returns 0."},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_set_rom_image_directory.html#twin_set_rom_image_directory","title":"twin_set_rom_image_directory","text":"twin_set_rom_image_directory\n\n\n\nTwinRuntime.twin_set_rom_image_directory(model_name, directory_path)\n\nSet the directory in the local filesystem where ROM images will be\nsaved for the TBROM model name. This method is only supported for Twin\nmodels created from one or more TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM.\n\ndirectory_path\n\npython:str\n\nAbsolute path of the directory where to store the images."},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#static-rom-creation-twin-generation-and-evaluation","title":"Static ROM creation, Twin generation and evaluation","text":"Static ROM creation, Twin generation and evaluation\n\nThis example shows how you can use PyAEDT and PyTwin together. PyAEDT is used on one side\nto generate a static ROM based on training data, and then create and export a twin model.\nPyTwin is used on the other side to load and evaluate the generated twin model.\nParametric field history results (i.e. transient results collected on a fixed time interval\nfor different parameters values) have been generated out of LS-DYNA simulations. Once the twin\nis generated, it can be evaluated to make predictions of time series (e.g. transient displacement at\na given probe location)\n\nThis example requires an installation of Ansys Twin Builder 2025R1 or above."},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#perform-required-imports","title":"Static ROM creation, Twin generation and evaluation > Perform required imports","text":"Perform required imports\n\nPerform required imports, which include downloading and importing the\ninput files."},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#define-auxiliary-functions","title":"Static ROM creation, Twin generation and evaluation > Define auxiliary functions","text":"Define auxiliary functions\n\nDefine auxiliary functions for computing # the norm of the output field."},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#project-settings","title":"Static ROM creation, Twin generation and evaluation > Project settings","text":"Project settings\n\nDefine Twin Builder project related settings and inputs files. The following code\nlaunches Twin Builder in graphical mode. You can change the Boolean parameter\nnon_graphical to True to launch Twin Builder in non-graphical mode.\nYou can also change the Boolean parameter new_thread to False to\nlaunch Twin Builder in an existing AEDT session if one is running."},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#rom-creation","title":"Static ROM creation, Twin generation and evaluation > ROM creation","text":"ROM creation\n\nCreate a Twin Builder instance"},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#twin-composition-and-export","title":"Static ROM creation, Twin generation and evaluation > Twin composition and export","text":"Twin composition and export\n\nDefine the grid distance for ease in calculations."},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#twin-evaluation","title":"Static ROM creation, Twin generation and evaluation > Twin evaluation","text":"Twin evaluation\n\nEvaluate the exported Twin with PyTwin and post process the results"},{"objectID":"Home","href":"examples/00-twin_creation/00-TBROM_Twin_creation_evaluation.html#results-post-processing","title":"Static ROM creation, Twin generation and evaluation > Results post processing","text":"Results post processing\n\nThe time history predictions for a particular probe (point #23) are post processed and compared to reference results.\n\n\n\nTotal running time of the script: (1 minutes 2.594 seconds)\n\n\n\nDownload Jupyter notebook: 00-TBROM_Twin_creation_evaluation.ipynb\n\nDownload Python source code: 00-TBROM_Twin_creation_evaluation.py\n\nDownload zipped: 00-TBROM_Twin_creation_evaluation.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.html#twinruntime","title":"TwinRuntime","text":"TwinRuntime\n\n\n\nclass pytwin.TwinRuntime(model_path, log_path=None, twin_runtime_library_path=None, log_level=LogLevel.TWIN_LOG_WARNING, load_model=True, fmi_type=FmiType.UNDEFINED)\n\nInstantiate a TwinRuntime wrapper object based on a TWIN file created by\nAnsys Twin Builder.\n\nAfter a TwinRuntime object is instantiated, it can be used to call\ndifferent APIs to manipulate and process the TWIN Runtime execution\n(e.g. initialization, setting up inputs, evaluating a time step,\ngetting the outputs,…).\n\nParameters\n\nmodel_path\n\npython:str\n\nFile path to the TWIN file for the twin model.\n\nlog_path\n\npython:str (optional)\n\nFile path to the log file associated to the TwinRuntime. By default,\nthe log is written at the same location as the TWIN file.\n\ntwin_runtime_library_path\n\npython:str (optional)\n\nFile path to the TWIN Runtime library. By default, it is located in a\nsubfolder of the current working directory based on the OS\n(TwinRuntimeSDK.dll or libTwinRuntimeSDK.so).\n\nlog_level\n\nLogLevel (optional)\n\nLevel option associated to the TWIN Runtime logging. By default, it is\nset to LogLevel.TWIN_LOG_WARNING.\n\nload_model\n\nbool (optional)\n\nWhether the TWIN model is loaded (True) or not (False) during the\nTwinRuntime object instantiation. Default value is True.\n\nExamples\n\nCreate the TwinRuntime given the file path to the TWIN file. Print the\ngeneral information related to the TWIN model, then instantiate the model,\ninitialize it, evaluate for a step and close the TwinRuntime.\n\n>>> from pytwin import TwinRuntime\n>>> twin_file = \"model.twin\"\n>>> twin_runtime = TwinRuntime(twin_file)\n>>> twin_runtime.twin_instantiate()\n>>> twin_runtime.twin_initialize()\n>>> twin_runtime.twin_simulate(0.001)\n>>> twin_runtime.twin_close()\n\nMethods\n\n"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar with\nthis guide before attempting to contribute to PyTwin.\n\nThe following contribution information is specific to PyTwin."},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PyTwin Issues page to\nsubmit questions, report bugs, and request new features."},{"objectID":"Contribute","href":"contributing.html#clone-the-repository","title":"Contribute > Clone the repository","text":"Clone the repository\n\nTo clone and install the latest PyTwin release in development\nmode, run this code:"},{"objectID":"Contribute","href":"contributing.html#build-documentation","title":"Contribute > Build documentation","text":"Build documentation\n\nTo build the PyTwin documentation locally, in the root directory of the\nrepository, run this code:\n\nAfter the build completes, the HTML documentation is located in the\n_builds/html directory. You can load the index.html file in\nthis directory into a web browser.\n\nYou can clear all HTML files from the _builds/html directory with\nthis command:"},{"objectID":"Contribute","href":"contributing.html#run-unitary-tests","title":"Contribute > Run unitary tests","text":"Run unitary tests\n\nTo launch pytwin unitary tests automatically to verify that code modifications\ndo not break existing logic, install the pytest\npackage into your Python environment. Then, from the root directory, run this code:"},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nPyTwin is compliant with the PyAnsys code style. It uses the tool\npre-commit to check the code style. You can\ninstall and activate this tool with this code:\n\nOr, you can directly execute pre-commit with\nthis command:"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.TBROM_FILENAME_TIME_FORMAT.html#tbrom_filename_time_format","title":"TBROM_FILENAME_TIME_FORMAT","text":"TBROM_FILENAME_TIME_FORMAT\n\n\n\nTwinModel.TBROM_FILENAME_TIME_FORMAT = '.6f'\n\n"},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogOption.html#pytwinlogoption","title":"PyTwinLogOption","text":"PyTwinLogOption\n\n\n\nclass pytwin.PyTwinLogOption(*values)\n\nProvides an enum for choosing the logging option for use by all PyTwin objects.\n\nPYTWIN_LOGGING_OPT_FILE:\n\nRedirect logging to the PyTwin log file stored in the PyTwin working directory.\n\nPYTWIN_LOGGING_OPT_CONSOLE:\n\nRedirect logging to the console.\n\nPYTWIN_LOGGING_OPT_NOLOGGING:\n\nDisable logging.\n\nAttributes\n\n"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.get_tbrom_time_grid.html#get_tbrom_time_grid","title":"get_tbrom_time_grid","text":"get_tbrom_time_grid\n\n\n\nTwinModel.get_tbrom_time_grid(rom_name)\n\nReturn the TBROM time grid for parametric field history ROM in the form of a list.\n\nParameters\n\nrom_name\n\npython:str\n\nName of the ROM. To get a list of available ROMs, see the\npytwin.TwinModel.tbrom_names attribute.\n\nReturns\n\npython:list[python:float]\n\nList of time points used to build the field history.\n\nRaises\n\nTwinModelError:\n\nIf TwinModel object does not include any TBROMs.\nIf the provided ROM name is not available.\nIf the TBROM is not a parametric field history ROM.\n\nExamples\n\n>>> from pytwin import TwinModel\n>>> model = TwinModel(model_filepath='path_to_twin_model_with_TBROM_in_it.twin')\n>>> romname = model.tbrom_names[0]\n>>> time_grid = model.get_tbrom_time_grid(romname)\n>>> model.initialize_evaluation()"},{"objectID":"Home","href":"api/evaluate/_autosummary/pytwin.TwinModel.evaluation_time.html#evaluation_time","title":"evaluation_time","text":"evaluation_time\n\n\n\nproperty TwinModel.evaluation_time\n\nFloating point number that is the current twin model evaluation time in seconds."},{"objectID":"Home","href":"api/sdk/index.html#twin-runtimes","title":"Twin runtimes","text":"Twin runtimes\n\nThe TwinRuntime class provides access to\ntwin runtime functionalities.\n\n"},{"objectID":"Home","href":"api/sdk/index.html#workflow-example","title":"Twin runtimes > Workflow example","text":"Workflow example\n\nThis code shows how to load the TwinRuntime module and print twin information."},{"objectID":"Home","href":"api/logging/_autosummary/pytwin.PyTwinLogOption.PYTWIN_LOGGING_OPT_CONSOLE.html#pytwin_logging_opt_console","title":"PYTWIN_LOGGING_OPT_CONSOLE","text":"PYTWIN_LOGGING_OPT_CONSOLE\n\n\n\nPyTwinLogOption.PYTWIN_LOGGING_OPT_CONSOLE = 1\n\n"},{"objectID":"Home","href":"api/sdk/_autosummary/pytwin.TwinRuntime.twin_disable_3d_rom_model_data.html#twin_disable_3d_rom_model_data","title":"twin_disable_3d_rom_model_data","text":"twin_disable_3d_rom_model_data\n\n\n\nTwinRuntime.twin_disable_3d_rom_model_data(model_name)\n\nDisables the generation of 3D data (mode coefficients and optionally\nsnapshots files) for the given model name in the next time steps.\nIf the 3D generation is already disabled, behavior remains unchanged.\nThis method is only supported for Twin models created from one or\nmore TBROM components.\n\nParameters\n\nmodel_name\n\npython:str\n\nModel name of the TBROM for which 3D data generation needs\nto be disabled."}]